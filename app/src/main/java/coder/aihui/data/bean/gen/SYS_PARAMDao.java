package coder.aihui.data.bean.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import coder.aihui.data.bean.SYS_PARAM;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYS__PARAM".
*/
public class SYS_PARAMDao extends AbstractDao<SYS_PARAM, Long> {

    public static final String TABLENAME = "SYS__PARAM";

    /**
     * Properties of entity SYS_PARAM.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PARAM_ID = new Property(0, Long.class, "PARAM_ID", true, "PARAM__ID");
        public final static Property PARAM_KEY = new Property(1, String.class, "PARAM_KEY", false, "PARAM__KEY");
        public final static Property PARAM_VALUE = new Property(2, String.class, "PARAM_VALUE", false, "PARAM__VALUE");
        public final static Property PARAM_REMARK = new Property(3, String.class, "PARAM_REMARK", false, "PARAM__REMARK");
    }


    public SYS_PARAMDao(DaoConfig config) {
        super(config);
    }
    
    public SYS_PARAMDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYS__PARAM\" (" + //
                "\"PARAM__ID\" INTEGER PRIMARY KEY ," + // 0: PARAM_ID
                "\"PARAM__KEY\" TEXT," + // 1: PARAM_KEY
                "\"PARAM__VALUE\" TEXT," + // 2: PARAM_VALUE
                "\"PARAM__REMARK\" TEXT);"); // 3: PARAM_REMARK
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYS__PARAM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SYS_PARAM entity) {
        stmt.clearBindings();
 
        Long PARAM_ID = entity.getPARAM_ID();
        if (PARAM_ID != null) {
            stmt.bindLong(1, PARAM_ID);
        }
 
        String PARAM_KEY = entity.getPARAM_KEY();
        if (PARAM_KEY != null) {
            stmt.bindString(2, PARAM_KEY);
        }
 
        String PARAM_VALUE = entity.getPARAM_VALUE();
        if (PARAM_VALUE != null) {
            stmt.bindString(3, PARAM_VALUE);
        }
 
        String PARAM_REMARK = entity.getPARAM_REMARK();
        if (PARAM_REMARK != null) {
            stmt.bindString(4, PARAM_REMARK);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SYS_PARAM entity) {
        stmt.clearBindings();
 
        Long PARAM_ID = entity.getPARAM_ID();
        if (PARAM_ID != null) {
            stmt.bindLong(1, PARAM_ID);
        }
 
        String PARAM_KEY = entity.getPARAM_KEY();
        if (PARAM_KEY != null) {
            stmt.bindString(2, PARAM_KEY);
        }
 
        String PARAM_VALUE = entity.getPARAM_VALUE();
        if (PARAM_VALUE != null) {
            stmt.bindString(3, PARAM_VALUE);
        }
 
        String PARAM_REMARK = entity.getPARAM_REMARK();
        if (PARAM_REMARK != null) {
            stmt.bindString(4, PARAM_REMARK);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SYS_PARAM readEntity(Cursor cursor, int offset) {
        SYS_PARAM entity = new SYS_PARAM( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // PARAM_ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // PARAM_KEY
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // PARAM_VALUE
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // PARAM_REMARK
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SYS_PARAM entity, int offset) {
        entity.setPARAM_ID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPARAM_KEY(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPARAM_VALUE(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPARAM_REMARK(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SYS_PARAM entity, long rowId) {
        entity.setPARAM_ID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SYS_PARAM entity) {
        if(entity != null) {
            return entity.getPARAM_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SYS_PARAM entity) {
        return entity.getPARAM_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
