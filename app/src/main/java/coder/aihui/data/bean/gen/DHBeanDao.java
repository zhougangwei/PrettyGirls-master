package coder.aihui.data.bean.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import coder.aihui.data.bean.DHBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DHBEAN".
*/
public class DHBeanDao extends AbstractDao<DHBean, Long> {

    public static final String TABLENAME = "DHBEAN";

    /**
     * Properties of entity DHBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Dh = new Property(1, String.class, "dh", false, "DH");
        public final static Property Wzmc = new Property(2, String.class, "wzmc", false, "WZMC");
        public final static Property Num = new Property(3, Integer.class, "num", false, "NUM");
        public final static Property ContractId = new Property(4, String.class, "contractId", false, "CONTRACT_ID");
        public final static Property HtmxId = new Property(5, Long.class, "htmxId", false, "HTMX_ID");
    }


    public DHBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DHBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DHBEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DH\" TEXT," + // 1: dh
                "\"WZMC\" TEXT," + // 2: wzmc
                "\"NUM\" INTEGER," + // 3: num
                "\"CONTRACT_ID\" TEXT," + // 4: contractId
                "\"HTMX_ID\" INTEGER);"); // 5: htmxId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DHBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DHBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String dh = entity.getDh();
        if (dh != null) {
            stmt.bindString(2, dh);
        }
 
        String wzmc = entity.getWzmc();
        if (wzmc != null) {
            stmt.bindString(3, wzmc);
        }
 
        Integer num = entity.getNum();
        if (num != null) {
            stmt.bindLong(4, num);
        }
 
        String contractId = entity.getContractId();
        if (contractId != null) {
            stmt.bindString(5, contractId);
        }
 
        Long htmxId = entity.getHtmxId();
        if (htmxId != null) {
            stmt.bindLong(6, htmxId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DHBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String dh = entity.getDh();
        if (dh != null) {
            stmt.bindString(2, dh);
        }
 
        String wzmc = entity.getWzmc();
        if (wzmc != null) {
            stmt.bindString(3, wzmc);
        }
 
        Integer num = entity.getNum();
        if (num != null) {
            stmt.bindLong(4, num);
        }
 
        String contractId = entity.getContractId();
        if (contractId != null) {
            stmt.bindString(5, contractId);
        }
 
        Long htmxId = entity.getHtmxId();
        if (htmxId != null) {
            stmt.bindLong(6, htmxId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DHBean readEntity(Cursor cursor, int offset) {
        DHBean entity = new DHBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dh
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // wzmc
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // num
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // contractId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // htmxId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DHBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDh(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWzmc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNum(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setContractId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHtmxId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DHBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DHBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DHBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
