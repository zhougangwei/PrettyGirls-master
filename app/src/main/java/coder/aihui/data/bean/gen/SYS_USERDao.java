package coder.aihui.data.bean.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import coder.aihui.data.bean.SYS_USER;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYS__USER".
*/
public class SYS_USERDao extends AbstractDao<SYS_USER, Long> {

    public static final String TABLENAME = "SYS__USER";

    /**
     * Properties of entity SYS_USER.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property USER_ID = new Property(0, Long.class, "USER_ID", true, "USER__ID");
        public final static Property USER_DEPT_ID = new Property(1, Integer.class, "USER_DEPT_ID", false, "USER__DEPT__ID");
        public final static Property USER_ACCOUNT = new Property(2, String.class, "USER_ACCOUNT", false, "USER__ACCOUNT");
        public final static Property USER_PSWD = new Property(3, String.class, "USER_PSWD", false, "USER__PSWD");
        public final static Property USER_CODE = new Property(4, String.class, "USER_CODE", false, "USER__CODE");
        public final static Property USER_NAME = new Property(5, String.class, "USER_NAME", false, "USER__NAME");
        public final static Property USER_SEX = new Property(6, Integer.class, "USER_SEX", false, "USER__SEX");
        public final static Property USER_PHONE = new Property(7, String.class, "USER_PHONE", false, "USER__PHONE");
        public final static Property USER_ISDEL = new Property(8, Integer.class, "USER_ISDEL", false, "USER__ISDEL");
        public final static Property USER_PY = new Property(9, String.class, "USER_PY", false, "USER__PY");
        public final static Property USER_WB = new Property(10, String.class, "USER_WB", false, "USER__WB");
        public final static Property HOSPITAL_NAME = new Property(11, String.class, "HOSPITAL_NAME", false, "HOSPITAL__NAME");
        public final static Property USER_FUNCS = new Property(12, String.class, "USER_FUNCS", false, "USER__FUNCS");
    }


    public SYS_USERDao(DaoConfig config) {
        super(config);
    }
    
    public SYS_USERDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYS__USER\" (" + //
                "\"USER__ID\" INTEGER PRIMARY KEY ," + // 0: USER_ID
                "\"USER__DEPT__ID\" INTEGER," + // 1: USER_DEPT_ID
                "\"USER__ACCOUNT\" TEXT," + // 2: USER_ACCOUNT
                "\"USER__PSWD\" TEXT," + // 3: USER_PSWD
                "\"USER__CODE\" TEXT," + // 4: USER_CODE
                "\"USER__NAME\" TEXT," + // 5: USER_NAME
                "\"USER__SEX\" INTEGER," + // 6: USER_SEX
                "\"USER__PHONE\" TEXT," + // 7: USER_PHONE
                "\"USER__ISDEL\" INTEGER," + // 8: USER_ISDEL
                "\"USER__PY\" TEXT," + // 9: USER_PY
                "\"USER__WB\" TEXT," + // 10: USER_WB
                "\"HOSPITAL__NAME\" TEXT," + // 11: HOSPITAL_NAME
                "\"USER__FUNCS\" TEXT);"); // 12: USER_FUNCS
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYS__USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SYS_USER entity) {
        stmt.clearBindings();
 
        Long USER_ID = entity.getUSER_ID();
        if (USER_ID != null) {
            stmt.bindLong(1, USER_ID);
        }
 
        Integer USER_DEPT_ID = entity.getUSER_DEPT_ID();
        if (USER_DEPT_ID != null) {
            stmt.bindLong(2, USER_DEPT_ID);
        }
 
        String USER_ACCOUNT = entity.getUSER_ACCOUNT();
        if (USER_ACCOUNT != null) {
            stmt.bindString(3, USER_ACCOUNT);
        }
 
        String USER_PSWD = entity.getUSER_PSWD();
        if (USER_PSWD != null) {
            stmt.bindString(4, USER_PSWD);
        }
 
        String USER_CODE = entity.getUSER_CODE();
        if (USER_CODE != null) {
            stmt.bindString(5, USER_CODE);
        }
 
        String USER_NAME = entity.getUSER_NAME();
        if (USER_NAME != null) {
            stmt.bindString(6, USER_NAME);
        }
 
        Integer USER_SEX = entity.getUSER_SEX();
        if (USER_SEX != null) {
            stmt.bindLong(7, USER_SEX);
        }
 
        String USER_PHONE = entity.getUSER_PHONE();
        if (USER_PHONE != null) {
            stmt.bindString(8, USER_PHONE);
        }
 
        Integer USER_ISDEL = entity.getUSER_ISDEL();
        if (USER_ISDEL != null) {
            stmt.bindLong(9, USER_ISDEL);
        }
 
        String USER_PY = entity.getUSER_PY();
        if (USER_PY != null) {
            stmt.bindString(10, USER_PY);
        }
 
        String USER_WB = entity.getUSER_WB();
        if (USER_WB != null) {
            stmt.bindString(11, USER_WB);
        }
 
        String HOSPITAL_NAME = entity.getHOSPITAL_NAME();
        if (HOSPITAL_NAME != null) {
            stmt.bindString(12, HOSPITAL_NAME);
        }
 
        String USER_FUNCS = entity.getUSER_FUNCS();
        if (USER_FUNCS != null) {
            stmt.bindString(13, USER_FUNCS);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SYS_USER entity) {
        stmt.clearBindings();
 
        Long USER_ID = entity.getUSER_ID();
        if (USER_ID != null) {
            stmt.bindLong(1, USER_ID);
        }
 
        Integer USER_DEPT_ID = entity.getUSER_DEPT_ID();
        if (USER_DEPT_ID != null) {
            stmt.bindLong(2, USER_DEPT_ID);
        }
 
        String USER_ACCOUNT = entity.getUSER_ACCOUNT();
        if (USER_ACCOUNT != null) {
            stmt.bindString(3, USER_ACCOUNT);
        }
 
        String USER_PSWD = entity.getUSER_PSWD();
        if (USER_PSWD != null) {
            stmt.bindString(4, USER_PSWD);
        }
 
        String USER_CODE = entity.getUSER_CODE();
        if (USER_CODE != null) {
            stmt.bindString(5, USER_CODE);
        }
 
        String USER_NAME = entity.getUSER_NAME();
        if (USER_NAME != null) {
            stmt.bindString(6, USER_NAME);
        }
 
        Integer USER_SEX = entity.getUSER_SEX();
        if (USER_SEX != null) {
            stmt.bindLong(7, USER_SEX);
        }
 
        String USER_PHONE = entity.getUSER_PHONE();
        if (USER_PHONE != null) {
            stmt.bindString(8, USER_PHONE);
        }
 
        Integer USER_ISDEL = entity.getUSER_ISDEL();
        if (USER_ISDEL != null) {
            stmt.bindLong(9, USER_ISDEL);
        }
 
        String USER_PY = entity.getUSER_PY();
        if (USER_PY != null) {
            stmt.bindString(10, USER_PY);
        }
 
        String USER_WB = entity.getUSER_WB();
        if (USER_WB != null) {
            stmt.bindString(11, USER_WB);
        }
 
        String HOSPITAL_NAME = entity.getHOSPITAL_NAME();
        if (HOSPITAL_NAME != null) {
            stmt.bindString(12, HOSPITAL_NAME);
        }
 
        String USER_FUNCS = entity.getUSER_FUNCS();
        if (USER_FUNCS != null) {
            stmt.bindString(13, USER_FUNCS);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SYS_USER readEntity(Cursor cursor, int offset) {
        SYS_USER entity = new SYS_USER( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // USER_ID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // USER_DEPT_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // USER_ACCOUNT
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // USER_PSWD
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // USER_CODE
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // USER_NAME
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // USER_SEX
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // USER_PHONE
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // USER_ISDEL
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // USER_PY
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // USER_WB
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // HOSPITAL_NAME
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // USER_FUNCS
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SYS_USER entity, int offset) {
        entity.setUSER_ID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUSER_DEPT_ID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setUSER_ACCOUNT(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUSER_PSWD(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUSER_CODE(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUSER_NAME(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUSER_SEX(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setUSER_PHONE(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUSER_ISDEL(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setUSER_PY(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUSER_WB(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setHOSPITAL_NAME(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUSER_FUNCS(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SYS_USER entity, long rowId) {
        entity.setUSER_ID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SYS_USER entity) {
        if(entity != null) {
            return entity.getUSER_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SYS_USER entity) {
        return entity.getUSER_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
