package coder.aihui.data.bean.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import coder.aihui.data.bean.INSPECT_REP;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INSPECT__REP".
*/
public class INSPECT_REPDao extends AbstractDao<INSPECT_REP, Long> {

    public static final String TABLENAME = "INSPECT__REP";

    /**
     * Properties of entity INSPECT_REP.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property INSR_ID = new Property(0, Long.class, "INSR_ID", true, "INSR__ID");
        public final static Property INSR_FK_ID = new Property(1, Integer.class, "INSR_FK_ID", false, "INSR__FK__ID");
        public final static Property INSR_TYPE = new Property(2, String.class, "INSR_TYPE", false, "INSR__TYPE");
        public final static Property INSR_EXEC_DATE = new Property(3, java.util.Date.class, "INSR_EXEC_DATE", false, "INSR__EXEC__DATE");
        public final static Property INSR_PRIOR_EXEC_DATE = new Property(4, java.util.Date.class, "INSR_PRIOR_EXEC_DATE", false, "INSR__PRIOR__EXEC__DATE");
        public final static Property INSR_USER_ID = new Property(5, Integer.class, "INSR_USER_ID", false, "INSR__USER__ID");
        public final static Property INSR_RESULT = new Property(6, String.class, "INSR_RESULT", false, "INSR__RESULT");
        public final static Property INSR_NID = new Property(7, String.class, "INSR_NID", false, "INSR__NID");
        public final static Property INSR_REMARK = new Property(8, String.class, "INSR_REMARK", false, "INSR__REMARK");
        public final static Property INSR_WX_NEED = new Property(9, Integer.class, "INSR_WX_NEED", false, "INSR__WX__NEED");
        public final static Property INSR_CREATE_DATE = new Property(10, java.util.Date.class, "INSR_CREATE_DATE", false, "INSR__CREATE__DATE");
        public final static Property INSR_CREATE_USER = new Property(11, Integer.class, "INSR_CREATE_USER", false, "INSR__CREATE__USER");
        public final static Property INSR_UPDATE_DATE = new Property(12, java.util.Date.class, "INSR_UPDATE_DATE", false, "INSR__UPDATE__DATE");
        public final static Property INSR_UPDATE_USER = new Property(13, Integer.class, "INSR_UPDATE_USER", false, "INSR__UPDATE__USER");
        public final static Property KPBH = new Property(14, String.class, "KPBH", false, "KPBH");
        public final static Property DDID = new Property(15, Long.class, "DDID", false, "DDID");
        public final static Property DDMC = new Property(16, String.class, "DDMC", false, "DDMC");
        public final static Property WZMC = new Property(17, String.class, "WZMC", false, "WZMC");
        public final static Property ZQLX = new Property(18, String.class, "ZQLX", false, "ZQLX");
        public final static Property XJFL = new Property(19, Long.class, "XJFL", false, "XJFL");
        public final static Property XJFL_MC = new Property(20, String.class, "XJFL_MC", false, "XJFL__MC");
        public final static Property INSE_CYCLE = new Property(21, String.class, "INSE_CYCLE", false, "INSE__CYCLE");
        public final static Property RFID_CODE = new Property(22, String.class, "RFID_CODE", false, "RFID__CODE");
        public final static Property BAR_CODE = new Property(23, String.class, "BAR_CODE", false, "BAR__CODE");
        public final static Property SYNC_DATE = new Property(24, java.util.Date.class, "SYNC_DATE", false, "SYNC__DATE");
        public final static Property SYNC_FLAG = new Property(25, Integer.class, "SYNC_FLAG", false, "SYNC__FLAG");
        public final static Property UUID = new Property(26, String.class, "UUID", false, "UUID");
        public final static Property KPBH_OLD = new Property(27, String.class, "KPBH_OLD", false, "KPBH__OLD");
        public final static Property REP_NAMES = new Property(28, String.class, "REP_NAMES", false, "REP__NAMES");
        public final static Property REP_IDS = new Property(29, String.class, "REP_IDS", false, "REP__IDS");
        public final static Property KSID = new Property(30, Long.class, "KSID", false, "KSID");
        public final static Property KSMC = new Property(31, String.class, "KSMC", false, "KSMC");
        public final static Property SCBH = new Property(32, String.class, "SCBH", false, "SCBH");
        public final static Property GGXH = new Property(33, String.class, "GGXH", false, "GGXH");
        public final static Property PPMC = new Property(34, String.class, "PPMC", false, "PPMC");
        public final static Property NET_INSPRID = new Property(35, Long.class, "NET_INSPRID", false, "NET__INSPRID");
        public final static Property ISCHECK = new Property(36, Integer.class, "ISCHECK", false, "ISCHECK");
        public final static Property UP_FILE_ID = new Property(37, Integer.class, "UP_FILE_ID", false, "UP__FILE__ID");
        public final static Property UP_FILE_TYPE = new Property(38, Integer.class, "UP_FILE_TYPE", false, "UP__FILE__TYPE");
    }


    public INSPECT_REPDao(DaoConfig config) {
        super(config);
    }
    
    public INSPECT_REPDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INSPECT__REP\" (" + //
                "\"INSR__ID\" INTEGER PRIMARY KEY ," + // 0: INSR_ID
                "\"INSR__FK__ID\" INTEGER," + // 1: INSR_FK_ID
                "\"INSR__TYPE\" TEXT," + // 2: INSR_TYPE
                "\"INSR__EXEC__DATE\" INTEGER," + // 3: INSR_EXEC_DATE
                "\"INSR__PRIOR__EXEC__DATE\" INTEGER," + // 4: INSR_PRIOR_EXEC_DATE
                "\"INSR__USER__ID\" INTEGER," + // 5: INSR_USER_ID
                "\"INSR__RESULT\" TEXT," + // 6: INSR_RESULT
                "\"INSR__NID\" TEXT," + // 7: INSR_NID
                "\"INSR__REMARK\" TEXT," + // 8: INSR_REMARK
                "\"INSR__WX__NEED\" INTEGER," + // 9: INSR_WX_NEED
                "\"INSR__CREATE__DATE\" INTEGER," + // 10: INSR_CREATE_DATE
                "\"INSR__CREATE__USER\" INTEGER," + // 11: INSR_CREATE_USER
                "\"INSR__UPDATE__DATE\" INTEGER," + // 12: INSR_UPDATE_DATE
                "\"INSR__UPDATE__USER\" INTEGER," + // 13: INSR_UPDATE_USER
                "\"KPBH\" TEXT," + // 14: KPBH
                "\"DDID\" INTEGER," + // 15: DDID
                "\"DDMC\" TEXT," + // 16: DDMC
                "\"WZMC\" TEXT," + // 17: WZMC
                "\"ZQLX\" TEXT," + // 18: ZQLX
                "\"XJFL\" INTEGER," + // 19: XJFL
                "\"XJFL__MC\" TEXT," + // 20: XJFL_MC
                "\"INSE__CYCLE\" TEXT," + // 21: INSE_CYCLE
                "\"RFID__CODE\" TEXT," + // 22: RFID_CODE
                "\"BAR__CODE\" TEXT," + // 23: BAR_CODE
                "\"SYNC__DATE\" INTEGER," + // 24: SYNC_DATE
                "\"SYNC__FLAG\" INTEGER," + // 25: SYNC_FLAG
                "\"UUID\" TEXT," + // 26: UUID
                "\"KPBH__OLD\" TEXT," + // 27: KPBH_OLD
                "\"REP__NAMES\" TEXT," + // 28: REP_NAMES
                "\"REP__IDS\" TEXT," + // 29: REP_IDS
                "\"KSID\" INTEGER," + // 30: KSID
                "\"KSMC\" TEXT," + // 31: KSMC
                "\"SCBH\" TEXT," + // 32: SCBH
                "\"GGXH\" TEXT," + // 33: GGXH
                "\"PPMC\" TEXT," + // 34: PPMC
                "\"NET__INSPRID\" INTEGER," + // 35: NET_INSPRID
                "\"ISCHECK\" INTEGER," + // 36: ISCHECK
                "\"UP__FILE__ID\" INTEGER," + // 37: UP_FILE_ID
                "\"UP__FILE__TYPE\" INTEGER);"); // 38: UP_FILE_TYPE
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INSPECT__REP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, INSPECT_REP entity) {
        stmt.clearBindings();
 
        Long INSR_ID = entity.getINSR_ID();
        if (INSR_ID != null) {
            stmt.bindLong(1, INSR_ID);
        }
 
        Integer INSR_FK_ID = entity.getINSR_FK_ID();
        if (INSR_FK_ID != null) {
            stmt.bindLong(2, INSR_FK_ID);
        }
 
        String INSR_TYPE = entity.getINSR_TYPE();
        if (INSR_TYPE != null) {
            stmt.bindString(3, INSR_TYPE);
        }
 
        java.util.Date INSR_EXEC_DATE = entity.getINSR_EXEC_DATE();
        if (INSR_EXEC_DATE != null) {
            stmt.bindLong(4, INSR_EXEC_DATE.getTime());
        }
 
        java.util.Date INSR_PRIOR_EXEC_DATE = entity.getINSR_PRIOR_EXEC_DATE();
        if (INSR_PRIOR_EXEC_DATE != null) {
            stmt.bindLong(5, INSR_PRIOR_EXEC_DATE.getTime());
        }
 
        Integer INSR_USER_ID = entity.getINSR_USER_ID();
        if (INSR_USER_ID != null) {
            stmt.bindLong(6, INSR_USER_ID);
        }
 
        String INSR_RESULT = entity.getINSR_RESULT();
        if (INSR_RESULT != null) {
            stmt.bindString(7, INSR_RESULT);
        }
 
        String INSR_NID = entity.getINSR_NID();
        if (INSR_NID != null) {
            stmt.bindString(8, INSR_NID);
        }
 
        String INSR_REMARK = entity.getINSR_REMARK();
        if (INSR_REMARK != null) {
            stmt.bindString(9, INSR_REMARK);
        }
 
        Integer INSR_WX_NEED = entity.getINSR_WX_NEED();
        if (INSR_WX_NEED != null) {
            stmt.bindLong(10, INSR_WX_NEED);
        }
 
        java.util.Date INSR_CREATE_DATE = entity.getINSR_CREATE_DATE();
        if (INSR_CREATE_DATE != null) {
            stmt.bindLong(11, INSR_CREATE_DATE.getTime());
        }
 
        Integer INSR_CREATE_USER = entity.getINSR_CREATE_USER();
        if (INSR_CREATE_USER != null) {
            stmt.bindLong(12, INSR_CREATE_USER);
        }
 
        java.util.Date INSR_UPDATE_DATE = entity.getINSR_UPDATE_DATE();
        if (INSR_UPDATE_DATE != null) {
            stmt.bindLong(13, INSR_UPDATE_DATE.getTime());
        }
 
        Integer INSR_UPDATE_USER = entity.getINSR_UPDATE_USER();
        if (INSR_UPDATE_USER != null) {
            stmt.bindLong(14, INSR_UPDATE_USER);
        }
 
        String KPBH = entity.getKPBH();
        if (KPBH != null) {
            stmt.bindString(15, KPBH);
        }
 
        Long DDID = entity.getDDID();
        if (DDID != null) {
            stmt.bindLong(16, DDID);
        }
 
        String DDMC = entity.getDDMC();
        if (DDMC != null) {
            stmt.bindString(17, DDMC);
        }
 
        String WZMC = entity.getWZMC();
        if (WZMC != null) {
            stmt.bindString(18, WZMC);
        }
 
        String ZQLX = entity.getZQLX();
        if (ZQLX != null) {
            stmt.bindString(19, ZQLX);
        }
 
        Long XJFL = entity.getXJFL();
        if (XJFL != null) {
            stmt.bindLong(20, XJFL);
        }
 
        String XJFL_MC = entity.getXJFL_MC();
        if (XJFL_MC != null) {
            stmt.bindString(21, XJFL_MC);
        }
 
        String INSE_CYCLE = entity.getINSE_CYCLE();
        if (INSE_CYCLE != null) {
            stmt.bindString(22, INSE_CYCLE);
        }
 
        String RFID_CODE = entity.getRFID_CODE();
        if (RFID_CODE != null) {
            stmt.bindString(23, RFID_CODE);
        }
 
        String BAR_CODE = entity.getBAR_CODE();
        if (BAR_CODE != null) {
            stmt.bindString(24, BAR_CODE);
        }
 
        java.util.Date SYNC_DATE = entity.getSYNC_DATE();
        if (SYNC_DATE != null) {
            stmt.bindLong(25, SYNC_DATE.getTime());
        }
 
        Integer SYNC_FLAG = entity.getSYNC_FLAG();
        if (SYNC_FLAG != null) {
            stmt.bindLong(26, SYNC_FLAG);
        }
 
        String UUID = entity.getUUID();
        if (UUID != null) {
            stmt.bindString(27, UUID);
        }
 
        String KPBH_OLD = entity.getKPBH_OLD();
        if (KPBH_OLD != null) {
            stmt.bindString(28, KPBH_OLD);
        }
 
        String REP_NAMES = entity.getREP_NAMES();
        if (REP_NAMES != null) {
            stmt.bindString(29, REP_NAMES);
        }
 
        String REP_IDS = entity.getREP_IDS();
        if (REP_IDS != null) {
            stmt.bindString(30, REP_IDS);
        }
 
        Long KSID = entity.getKSID();
        if (KSID != null) {
            stmt.bindLong(31, KSID);
        }
 
        String KSMC = entity.getKSMC();
        if (KSMC != null) {
            stmt.bindString(32, KSMC);
        }
 
        String SCBH = entity.getSCBH();
        if (SCBH != null) {
            stmt.bindString(33, SCBH);
        }
 
        String GGXH = entity.getGGXH();
        if (GGXH != null) {
            stmt.bindString(34, GGXH);
        }
 
        String PPMC = entity.getPPMC();
        if (PPMC != null) {
            stmt.bindString(35, PPMC);
        }
 
        Long NET_INSPRID = entity.getNET_INSPRID();
        if (NET_INSPRID != null) {
            stmt.bindLong(36, NET_INSPRID);
        }
 
        Integer ISCHECK = entity.getISCHECK();
        if (ISCHECK != null) {
            stmt.bindLong(37, ISCHECK);
        }
 
        Integer UP_FILE_ID = entity.getUP_FILE_ID();
        if (UP_FILE_ID != null) {
            stmt.bindLong(38, UP_FILE_ID);
        }
 
        Integer UP_FILE_TYPE = entity.getUP_FILE_TYPE();
        if (UP_FILE_TYPE != null) {
            stmt.bindLong(39, UP_FILE_TYPE);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, INSPECT_REP entity) {
        stmt.clearBindings();
 
        Long INSR_ID = entity.getINSR_ID();
        if (INSR_ID != null) {
            stmt.bindLong(1, INSR_ID);
        }
 
        Integer INSR_FK_ID = entity.getINSR_FK_ID();
        if (INSR_FK_ID != null) {
            stmt.bindLong(2, INSR_FK_ID);
        }
 
        String INSR_TYPE = entity.getINSR_TYPE();
        if (INSR_TYPE != null) {
            stmt.bindString(3, INSR_TYPE);
        }
 
        java.util.Date INSR_EXEC_DATE = entity.getINSR_EXEC_DATE();
        if (INSR_EXEC_DATE != null) {
            stmt.bindLong(4, INSR_EXEC_DATE.getTime());
        }
 
        java.util.Date INSR_PRIOR_EXEC_DATE = entity.getINSR_PRIOR_EXEC_DATE();
        if (INSR_PRIOR_EXEC_DATE != null) {
            stmt.bindLong(5, INSR_PRIOR_EXEC_DATE.getTime());
        }
 
        Integer INSR_USER_ID = entity.getINSR_USER_ID();
        if (INSR_USER_ID != null) {
            stmt.bindLong(6, INSR_USER_ID);
        }
 
        String INSR_RESULT = entity.getINSR_RESULT();
        if (INSR_RESULT != null) {
            stmt.bindString(7, INSR_RESULT);
        }
 
        String INSR_NID = entity.getINSR_NID();
        if (INSR_NID != null) {
            stmt.bindString(8, INSR_NID);
        }
 
        String INSR_REMARK = entity.getINSR_REMARK();
        if (INSR_REMARK != null) {
            stmt.bindString(9, INSR_REMARK);
        }
 
        Integer INSR_WX_NEED = entity.getINSR_WX_NEED();
        if (INSR_WX_NEED != null) {
            stmt.bindLong(10, INSR_WX_NEED);
        }
 
        java.util.Date INSR_CREATE_DATE = entity.getINSR_CREATE_DATE();
        if (INSR_CREATE_DATE != null) {
            stmt.bindLong(11, INSR_CREATE_DATE.getTime());
        }
 
        Integer INSR_CREATE_USER = entity.getINSR_CREATE_USER();
        if (INSR_CREATE_USER != null) {
            stmt.bindLong(12, INSR_CREATE_USER);
        }
 
        java.util.Date INSR_UPDATE_DATE = entity.getINSR_UPDATE_DATE();
        if (INSR_UPDATE_DATE != null) {
            stmt.bindLong(13, INSR_UPDATE_DATE.getTime());
        }
 
        Integer INSR_UPDATE_USER = entity.getINSR_UPDATE_USER();
        if (INSR_UPDATE_USER != null) {
            stmt.bindLong(14, INSR_UPDATE_USER);
        }
 
        String KPBH = entity.getKPBH();
        if (KPBH != null) {
            stmt.bindString(15, KPBH);
        }
 
        Long DDID = entity.getDDID();
        if (DDID != null) {
            stmt.bindLong(16, DDID);
        }
 
        String DDMC = entity.getDDMC();
        if (DDMC != null) {
            stmt.bindString(17, DDMC);
        }
 
        String WZMC = entity.getWZMC();
        if (WZMC != null) {
            stmt.bindString(18, WZMC);
        }
 
        String ZQLX = entity.getZQLX();
        if (ZQLX != null) {
            stmt.bindString(19, ZQLX);
        }
 
        Long XJFL = entity.getXJFL();
        if (XJFL != null) {
            stmt.bindLong(20, XJFL);
        }
 
        String XJFL_MC = entity.getXJFL_MC();
        if (XJFL_MC != null) {
            stmt.bindString(21, XJFL_MC);
        }
 
        String INSE_CYCLE = entity.getINSE_CYCLE();
        if (INSE_CYCLE != null) {
            stmt.bindString(22, INSE_CYCLE);
        }
 
        String RFID_CODE = entity.getRFID_CODE();
        if (RFID_CODE != null) {
            stmt.bindString(23, RFID_CODE);
        }
 
        String BAR_CODE = entity.getBAR_CODE();
        if (BAR_CODE != null) {
            stmt.bindString(24, BAR_CODE);
        }
 
        java.util.Date SYNC_DATE = entity.getSYNC_DATE();
        if (SYNC_DATE != null) {
            stmt.bindLong(25, SYNC_DATE.getTime());
        }
 
        Integer SYNC_FLAG = entity.getSYNC_FLAG();
        if (SYNC_FLAG != null) {
            stmt.bindLong(26, SYNC_FLAG);
        }
 
        String UUID = entity.getUUID();
        if (UUID != null) {
            stmt.bindString(27, UUID);
        }
 
        String KPBH_OLD = entity.getKPBH_OLD();
        if (KPBH_OLD != null) {
            stmt.bindString(28, KPBH_OLD);
        }
 
        String REP_NAMES = entity.getREP_NAMES();
        if (REP_NAMES != null) {
            stmt.bindString(29, REP_NAMES);
        }
 
        String REP_IDS = entity.getREP_IDS();
        if (REP_IDS != null) {
            stmt.bindString(30, REP_IDS);
        }
 
        Long KSID = entity.getKSID();
        if (KSID != null) {
            stmt.bindLong(31, KSID);
        }
 
        String KSMC = entity.getKSMC();
        if (KSMC != null) {
            stmt.bindString(32, KSMC);
        }
 
        String SCBH = entity.getSCBH();
        if (SCBH != null) {
            stmt.bindString(33, SCBH);
        }
 
        String GGXH = entity.getGGXH();
        if (GGXH != null) {
            stmt.bindString(34, GGXH);
        }
 
        String PPMC = entity.getPPMC();
        if (PPMC != null) {
            stmt.bindString(35, PPMC);
        }
 
        Long NET_INSPRID = entity.getNET_INSPRID();
        if (NET_INSPRID != null) {
            stmt.bindLong(36, NET_INSPRID);
        }
 
        Integer ISCHECK = entity.getISCHECK();
        if (ISCHECK != null) {
            stmt.bindLong(37, ISCHECK);
        }
 
        Integer UP_FILE_ID = entity.getUP_FILE_ID();
        if (UP_FILE_ID != null) {
            stmt.bindLong(38, UP_FILE_ID);
        }
 
        Integer UP_FILE_TYPE = entity.getUP_FILE_TYPE();
        if (UP_FILE_TYPE != null) {
            stmt.bindLong(39, UP_FILE_TYPE);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public INSPECT_REP readEntity(Cursor cursor, int offset) {
        INSPECT_REP entity = new INSPECT_REP( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // INSR_ID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // INSR_FK_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // INSR_TYPE
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // INSR_EXEC_DATE
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // INSR_PRIOR_EXEC_DATE
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // INSR_USER_ID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // INSR_RESULT
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // INSR_NID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // INSR_REMARK
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // INSR_WX_NEED
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // INSR_CREATE_DATE
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // INSR_CREATE_USER
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // INSR_UPDATE_DATE
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // INSR_UPDATE_USER
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // KPBH
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // DDID
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // DDMC
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // WZMC
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // ZQLX
            cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19), // XJFL
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // XJFL_MC
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // INSE_CYCLE
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // RFID_CODE
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // BAR_CODE
            cursor.isNull(offset + 24) ? null : new java.util.Date(cursor.getLong(offset + 24)), // SYNC_DATE
            cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // SYNC_FLAG
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // UUID
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // KPBH_OLD
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // REP_NAMES
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // REP_IDS
            cursor.isNull(offset + 30) ? null : cursor.getLong(offset + 30), // KSID
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // KSMC
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // SCBH
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // GGXH
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // PPMC
            cursor.isNull(offset + 35) ? null : cursor.getLong(offset + 35), // NET_INSPRID
            cursor.isNull(offset + 36) ? null : cursor.getInt(offset + 36), // ISCHECK
            cursor.isNull(offset + 37) ? null : cursor.getInt(offset + 37), // UP_FILE_ID
            cursor.isNull(offset + 38) ? null : cursor.getInt(offset + 38) // UP_FILE_TYPE
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, INSPECT_REP entity, int offset) {
        entity.setINSR_ID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setINSR_FK_ID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setINSR_TYPE(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setINSR_EXEC_DATE(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setINSR_PRIOR_EXEC_DATE(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setINSR_USER_ID(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setINSR_RESULT(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setINSR_NID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setINSR_REMARK(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setINSR_WX_NEED(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setINSR_CREATE_DATE(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setINSR_CREATE_USER(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setINSR_UPDATE_DATE(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setINSR_UPDATE_USER(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setKPBH(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDDID(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setDDMC(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setWZMC(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setZQLX(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setXJFL(cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19));
        entity.setXJFL_MC(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setINSE_CYCLE(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setRFID_CODE(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setBAR_CODE(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setSYNC_DATE(cursor.isNull(offset + 24) ? null : new java.util.Date(cursor.getLong(offset + 24)));
        entity.setSYNC_FLAG(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setUUID(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setKPBH_OLD(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setREP_NAMES(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setREP_IDS(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setKSID(cursor.isNull(offset + 30) ? null : cursor.getLong(offset + 30));
        entity.setKSMC(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setSCBH(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setGGXH(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setPPMC(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setNET_INSPRID(cursor.isNull(offset + 35) ? null : cursor.getLong(offset + 35));
        entity.setISCHECK(cursor.isNull(offset + 36) ? null : cursor.getInt(offset + 36));
        entity.setUP_FILE_ID(cursor.isNull(offset + 37) ? null : cursor.getInt(offset + 37));
        entity.setUP_FILE_TYPE(cursor.isNull(offset + 38) ? null : cursor.getInt(offset + 38));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(INSPECT_REP entity, long rowId) {
        entity.setINSR_ID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(INSPECT_REP entity) {
        if(entity != null) {
            return entity.getINSR_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(INSPECT_REP entity) {
        return entity.getINSR_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
