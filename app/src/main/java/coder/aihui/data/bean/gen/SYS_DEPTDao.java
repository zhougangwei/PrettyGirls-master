package coder.aihui.data.bean.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import coder.aihui.data.bean.SYS_DEPT;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYS__DEPT".
*/
public class SYS_DEPTDao extends AbstractDao<SYS_DEPT, Long> {

    public static final String TABLENAME = "SYS__DEPT";

    /**
     * Properties of entity SYS_DEPT.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DEPT_ID = new Property(0, Long.class, "DEPT_ID", true, "DEPT__ID");
        public final static Property DEPT_NAME = new Property(1, String.class, "DEPT_NAME", false, "DEPT__NAME");
        public final static Property DEPT_PARENT_ID = new Property(2, Long.class, "DEPT_PARENT_ID", false, "DEPT__PARENT__ID");
        public final static Property DEPT_CODE = new Property(3, String.class, "DEPT_CODE", false, "DEPT__CODE");
        public final static Property DEPT_ADDRESS = new Property(4, String.class, "DEPT_ADDRESS", false, "DEPT__ADDRESS");
        public final static Property DEPT_SEARCH_CODE = new Property(5, String.class, "DEPT_SEARCH_CODE", false, "DEPT__SEARCH__CODE");
        public final static Property DEPT_GRADE = new Property(6, Integer.class, "DEPT_GRADE", false, "DEPT__GRADE");
        public final static Property DEPT_TYPE = new Property(7, Integer.class, "DEPT_TYPE", false, "DEPT__TYPE");
        public final static Property DEPT_PY = new Property(8, String.class, "DEPT_PY", false, "DEPT__PY");
        public final static Property DEPT_WB = new Property(9, String.class, "DEPT_WB", false, "DEPT__WB");
        public final static Property DEPT_ISDEL = new Property(10, Integer.class, "DEPT_ISDEL", false, "DEPT__ISDEL");
        public final static Property DEPT_BARCODE = new Property(11, String.class, "DEPT_BARCODE", false, "DEPT__BARCODE");
        public final static Property DEPT_MATERIALS = new Property(12, Integer.class, "DEPT_MATERIALS", false, "DEPT__MATERIALS");
        public final static Property DEPT_OA_ID = new Property(13, String.class, "DEPT_OA_ID", false, "DEPT__OA__ID");
        public final static Property DEPT_HIS_ID = new Property(14, String.class, "DEPT_HIS_ID", false, "DEPT__HIS__ID");
    }


    public SYS_DEPTDao(DaoConfig config) {
        super(config);
    }
    
    public SYS_DEPTDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYS__DEPT\" (" + //
                "\"DEPT__ID\" INTEGER PRIMARY KEY ," + // 0: DEPT_ID
                "\"DEPT__NAME\" TEXT," + // 1: DEPT_NAME
                "\"DEPT__PARENT__ID\" INTEGER," + // 2: DEPT_PARENT_ID
                "\"DEPT__CODE\" TEXT," + // 3: DEPT_CODE
                "\"DEPT__ADDRESS\" TEXT," + // 4: DEPT_ADDRESS
                "\"DEPT__SEARCH__CODE\" TEXT," + // 5: DEPT_SEARCH_CODE
                "\"DEPT__GRADE\" INTEGER," + // 6: DEPT_GRADE
                "\"DEPT__TYPE\" INTEGER," + // 7: DEPT_TYPE
                "\"DEPT__PY\" TEXT," + // 8: DEPT_PY
                "\"DEPT__WB\" TEXT," + // 9: DEPT_WB
                "\"DEPT__ISDEL\" INTEGER," + // 10: DEPT_ISDEL
                "\"DEPT__BARCODE\" TEXT," + // 11: DEPT_BARCODE
                "\"DEPT__MATERIALS\" INTEGER," + // 12: DEPT_MATERIALS
                "\"DEPT__OA__ID\" TEXT," + // 13: DEPT_OA_ID
                "\"DEPT__HIS__ID\" TEXT);"); // 14: DEPT_HIS_ID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYS__DEPT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SYS_DEPT entity) {
        stmt.clearBindings();
 
        Long DEPT_ID = entity.getDEPT_ID();
        if (DEPT_ID != null) {
            stmt.bindLong(1, DEPT_ID);
        }
 
        String DEPT_NAME = entity.getDEPT_NAME();
        if (DEPT_NAME != null) {
            stmt.bindString(2, DEPT_NAME);
        }
 
        Long DEPT_PARENT_ID = entity.getDEPT_PARENT_ID();
        if (DEPT_PARENT_ID != null) {
            stmt.bindLong(3, DEPT_PARENT_ID);
        }
 
        String DEPT_CODE = entity.getDEPT_CODE();
        if (DEPT_CODE != null) {
            stmt.bindString(4, DEPT_CODE);
        }
 
        String DEPT_ADDRESS = entity.getDEPT_ADDRESS();
        if (DEPT_ADDRESS != null) {
            stmt.bindString(5, DEPT_ADDRESS);
        }
 
        String DEPT_SEARCH_CODE = entity.getDEPT_SEARCH_CODE();
        if (DEPT_SEARCH_CODE != null) {
            stmt.bindString(6, DEPT_SEARCH_CODE);
        }
 
        Integer DEPT_GRADE = entity.getDEPT_GRADE();
        if (DEPT_GRADE != null) {
            stmt.bindLong(7, DEPT_GRADE);
        }
 
        Integer DEPT_TYPE = entity.getDEPT_TYPE();
        if (DEPT_TYPE != null) {
            stmt.bindLong(8, DEPT_TYPE);
        }
 
        String DEPT_PY = entity.getDEPT_PY();
        if (DEPT_PY != null) {
            stmt.bindString(9, DEPT_PY);
        }
 
        String DEPT_WB = entity.getDEPT_WB();
        if (DEPT_WB != null) {
            stmt.bindString(10, DEPT_WB);
        }
 
        Integer DEPT_ISDEL = entity.getDEPT_ISDEL();
        if (DEPT_ISDEL != null) {
            stmt.bindLong(11, DEPT_ISDEL);
        }
 
        String DEPT_BARCODE = entity.getDEPT_BARCODE();
        if (DEPT_BARCODE != null) {
            stmt.bindString(12, DEPT_BARCODE);
        }
 
        Integer DEPT_MATERIALS = entity.getDEPT_MATERIALS();
        if (DEPT_MATERIALS != null) {
            stmt.bindLong(13, DEPT_MATERIALS);
        }
 
        String DEPT_OA_ID = entity.getDEPT_OA_ID();
        if (DEPT_OA_ID != null) {
            stmt.bindString(14, DEPT_OA_ID);
        }
 
        String DEPT_HIS_ID = entity.getDEPT_HIS_ID();
        if (DEPT_HIS_ID != null) {
            stmt.bindString(15, DEPT_HIS_ID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SYS_DEPT entity) {
        stmt.clearBindings();
 
        Long DEPT_ID = entity.getDEPT_ID();
        if (DEPT_ID != null) {
            stmt.bindLong(1, DEPT_ID);
        }
 
        String DEPT_NAME = entity.getDEPT_NAME();
        if (DEPT_NAME != null) {
            stmt.bindString(2, DEPT_NAME);
        }
 
        Long DEPT_PARENT_ID = entity.getDEPT_PARENT_ID();
        if (DEPT_PARENT_ID != null) {
            stmt.bindLong(3, DEPT_PARENT_ID);
        }
 
        String DEPT_CODE = entity.getDEPT_CODE();
        if (DEPT_CODE != null) {
            stmt.bindString(4, DEPT_CODE);
        }
 
        String DEPT_ADDRESS = entity.getDEPT_ADDRESS();
        if (DEPT_ADDRESS != null) {
            stmt.bindString(5, DEPT_ADDRESS);
        }
 
        String DEPT_SEARCH_CODE = entity.getDEPT_SEARCH_CODE();
        if (DEPT_SEARCH_CODE != null) {
            stmt.bindString(6, DEPT_SEARCH_CODE);
        }
 
        Integer DEPT_GRADE = entity.getDEPT_GRADE();
        if (DEPT_GRADE != null) {
            stmt.bindLong(7, DEPT_GRADE);
        }
 
        Integer DEPT_TYPE = entity.getDEPT_TYPE();
        if (DEPT_TYPE != null) {
            stmt.bindLong(8, DEPT_TYPE);
        }
 
        String DEPT_PY = entity.getDEPT_PY();
        if (DEPT_PY != null) {
            stmt.bindString(9, DEPT_PY);
        }
 
        String DEPT_WB = entity.getDEPT_WB();
        if (DEPT_WB != null) {
            stmt.bindString(10, DEPT_WB);
        }
 
        Integer DEPT_ISDEL = entity.getDEPT_ISDEL();
        if (DEPT_ISDEL != null) {
            stmt.bindLong(11, DEPT_ISDEL);
        }
 
        String DEPT_BARCODE = entity.getDEPT_BARCODE();
        if (DEPT_BARCODE != null) {
            stmt.bindString(12, DEPT_BARCODE);
        }
 
        Integer DEPT_MATERIALS = entity.getDEPT_MATERIALS();
        if (DEPT_MATERIALS != null) {
            stmt.bindLong(13, DEPT_MATERIALS);
        }
 
        String DEPT_OA_ID = entity.getDEPT_OA_ID();
        if (DEPT_OA_ID != null) {
            stmt.bindString(14, DEPT_OA_ID);
        }
 
        String DEPT_HIS_ID = entity.getDEPT_HIS_ID();
        if (DEPT_HIS_ID != null) {
            stmt.bindString(15, DEPT_HIS_ID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SYS_DEPT readEntity(Cursor cursor, int offset) {
        SYS_DEPT entity = new SYS_DEPT( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // DEPT_ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // DEPT_NAME
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // DEPT_PARENT_ID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // DEPT_CODE
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // DEPT_ADDRESS
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // DEPT_SEARCH_CODE
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // DEPT_GRADE
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // DEPT_TYPE
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // DEPT_PY
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // DEPT_WB
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // DEPT_ISDEL
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // DEPT_BARCODE
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // DEPT_MATERIALS
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // DEPT_OA_ID
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // DEPT_HIS_ID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SYS_DEPT entity, int offset) {
        entity.setDEPT_ID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDEPT_NAME(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDEPT_PARENT_ID(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setDEPT_CODE(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDEPT_ADDRESS(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDEPT_SEARCH_CODE(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDEPT_GRADE(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setDEPT_TYPE(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setDEPT_PY(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDEPT_WB(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDEPT_ISDEL(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setDEPT_BARCODE(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDEPT_MATERIALS(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setDEPT_OA_ID(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDEPT_HIS_ID(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SYS_DEPT entity, long rowId) {
        entity.setDEPT_ID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SYS_DEPT entity) {
        if(entity != null) {
            return entity.getDEPT_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SYS_DEPT entity) {
        return entity.getDEPT_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
