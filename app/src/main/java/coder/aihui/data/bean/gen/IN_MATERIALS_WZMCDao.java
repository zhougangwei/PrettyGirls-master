package coder.aihui.data.bean.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import coder.aihui.data.bean.IN_MATERIALS_WZMC;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IN__MATERIALS__WZMC".
*/
public class IN_MATERIALS_WZMCDao extends AbstractDao<IN_MATERIALS_WZMC, Long> {

    public static final String TABLENAME = "IN__MATERIALS__WZMC";

    /**
     * Properties of entity IN_MATERIALS_WZMC.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property MCID = new Property(1, String.class, "MCID", false, "MCID");
        public final static Property WZMC = new Property(2, String.class, "WZMC", false, "WZMC");
        public final static Property GGXH = new Property(3, String.class, "GGXH", false, "GGXH");
        public final static Property ZXDW = new Property(4, String.class, "ZXDW", false, "ZXDW");
        public final static Property CKDJ = new Property(5, Double.class, "CKDJ", false, "CKDJ");
        public final static Property PPMC = new Property(6, String.class, "PPMC", false, "PPMC");
        public final static Property PPID = new Property(7, Long.class, "PPID", false, "PPID");
    }


    public IN_MATERIALS_WZMCDao(DaoConfig config) {
        super(config);
    }
    
    public IN_MATERIALS_WZMCDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IN__MATERIALS__WZMC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: ID
                "\"MCID\" TEXT," + // 1: MCID
                "\"WZMC\" TEXT," + // 2: WZMC
                "\"GGXH\" TEXT," + // 3: GGXH
                "\"ZXDW\" TEXT," + // 4: ZXDW
                "\"CKDJ\" REAL," + // 5: CKDJ
                "\"PPMC\" TEXT," + // 6: PPMC
                "\"PPID\" INTEGER);"); // 7: PPID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IN__MATERIALS__WZMC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IN_MATERIALS_WZMC entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String MCID = entity.getMCID();
        if (MCID != null) {
            stmt.bindString(2, MCID);
        }
 
        String WZMC = entity.getWZMC();
        if (WZMC != null) {
            stmt.bindString(3, WZMC);
        }
 
        String GGXH = entity.getGGXH();
        if (GGXH != null) {
            stmt.bindString(4, GGXH);
        }
 
        String ZXDW = entity.getZXDW();
        if (ZXDW != null) {
            stmt.bindString(5, ZXDW);
        }
 
        Double CKDJ = entity.getCKDJ();
        if (CKDJ != null) {
            stmt.bindDouble(6, CKDJ);
        }
 
        String PPMC = entity.getPPMC();
        if (PPMC != null) {
            stmt.bindString(7, PPMC);
        }
 
        Long PPID = entity.getPPID();
        if (PPID != null) {
            stmt.bindLong(8, PPID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IN_MATERIALS_WZMC entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String MCID = entity.getMCID();
        if (MCID != null) {
            stmt.bindString(2, MCID);
        }
 
        String WZMC = entity.getWZMC();
        if (WZMC != null) {
            stmt.bindString(3, WZMC);
        }
 
        String GGXH = entity.getGGXH();
        if (GGXH != null) {
            stmt.bindString(4, GGXH);
        }
 
        String ZXDW = entity.getZXDW();
        if (ZXDW != null) {
            stmt.bindString(5, ZXDW);
        }
 
        Double CKDJ = entity.getCKDJ();
        if (CKDJ != null) {
            stmt.bindDouble(6, CKDJ);
        }
 
        String PPMC = entity.getPPMC();
        if (PPMC != null) {
            stmt.bindString(7, PPMC);
        }
 
        Long PPID = entity.getPPID();
        if (PPID != null) {
            stmt.bindLong(8, PPID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public IN_MATERIALS_WZMC readEntity(Cursor cursor, int offset) {
        IN_MATERIALS_WZMC entity = new IN_MATERIALS_WZMC( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // MCID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // WZMC
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // GGXH
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ZXDW
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // CKDJ
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // PPMC
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // PPID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IN_MATERIALS_WZMC entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMCID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWZMC(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGGXH(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setZXDW(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCKDJ(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setPPMC(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPPID(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IN_MATERIALS_WZMC entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IN_MATERIALS_WZMC entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IN_MATERIALS_WZMC entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
