package coder.aihui.data.bean.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import coder.aihui.data.bean.PDA_ASSET_CHECK;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PDA__ASSET__CHECK".
*/
public class PDA_ASSET_CHECKDao extends AbstractDao<PDA_ASSET_CHECK, Long> {

    public static final String TABLENAME = "PDA__ASSET__CHECK";

    /**
     * Properties of entity PDA_ASSET_CHECK.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CHECK_ID = new Property(0, Long.class, "CHECK_ID", true, "CHECK__ID");
        public final static Property ASSET_ID = new Property(1, Long.class, "ASSET_ID", false, "ASSET__ID");
        public final static Property QCPC = new Property(2, String.class, "QCPC", false, "QCPC");
        public final static Property PDA_ID = new Property(3, String.class, "PDA_ID", false, "PDA__ID");
        public final static Property CHECK_TYPE = new Property(4, String.class, "CHECK_TYPE", false, "CHECK__TYPE");
        public final static Property DS_TYPE = new Property(5, String.class, "DS_TYPE", false, "DS__TYPE");
        public final static Property IS_CHANGE = new Property(6, Integer.class, "IS_CHANGE", false, "IS__CHANGE");
        public final static Property CHANGE_DEPT = new Property(7, String.class, "CHANGE_DEPT", false, "CHANGE__DEPT");
        public final static Property IS_CHANGE_DD = new Property(8, Integer.class, "IS_CHANGE_DD", false, "IS__CHANGE__DD");
        public final static Property CHANGE_DDID = new Property(9, String.class, "CHANGE_DDID", false, "CHANGE__DDID");
        public final static Property ASSET_CHECK_ID = new Property(10, String.class, "ASSET_CHECK_ID", false, "ASSET__CHECK__ID");
        public final static Property ASSET_CHECK_NAME = new Property(11, String.class, "ASSET_CHECK_NAME", false, "ASSET__CHECK__NAME");
        public final static Property ASSET_CHECK_DATE = new Property(12, java.util.Date.class, "ASSET_CHECK_DATE", false, "ASSET__CHECK__DATE");
        public final static Property ASSET_CHECKER_ID = new Property(13, String.class, "ASSET_CHECKER_ID", false, "ASSET__CHECKER__ID");
        public final static Property ASSET_CHECKER_NAME = new Property(14, String.class, "ASSET_CHECKER_NAME", false, "ASSET__CHECKER__NAME");
        public final static Property ASSET_CHECKER_DATE = new Property(15, java.util.Date.class, "ASSET_CHECKER_DATE", false, "ASSET__CHECKER__DATE");
        public final static Property ASSET_COLLATE_ID = new Property(16, String.class, "ASSET_COLLATE_ID", false, "ASSET__COLLATE__ID");
        public final static Property ASSET_COLLATE_NAME = new Property(17, String.class, "ASSET_COLLATE_NAME", false, "ASSET__COLLATE__NAME");
        public final static Property ASSET_COLLATE_DATE = new Property(18, java.util.Date.class, "ASSET_COLLATE_DATE", false, "ASSET__COLLATE__DATE");
        public final static Property BGRID = new Property(19, Integer.class, "BGRID", false, "BGRID");
        public final static Property BGRXM = new Property(20, String.class, "BGRXM", false, "BGRXM");
        public final static Property ASSET_SYNC_FLAG = new Property(21, Integer.class, "ASSET_SYNC_FLAG", false, "ASSET__SYNC__FLAG");
        public final static Property ASSET_SYNC_DATE = new Property(22, java.util.Date.class, "ASSET_SYNC_DATE", false, "ASSET__SYNC__DATE");
        public final static Property REMARKS = new Property(23, String.class, "REMARKS", false, "REMARKS");
        public final static Property DDID = new Property(24, String.class, "DDID", false, "DDID");
        public final static Property KSID = new Property(25, String.class, "KSID", false, "KSID");
        public final static Property DQDDID = new Property(26, String.class, "DQDDID", false, "DQDDID");
        public final static Property DQKSID = new Property(27, String.class, "DQKSID", false, "DQKSID");
        public final static Property DQDDMC = new Property(28, String.class, "DQDDMC", false, "DQDDMC");
        public final static Property UUID = new Property(29, String.class, "UUID", false, "UUID");
        public final static Property LABEL_DEFAULT_NAME = new Property(30, String.class, "LABEL_DEFAULT_NAME", false, "LABEL__DEFAULT__NAME");
    }


    public PDA_ASSET_CHECKDao(DaoConfig config) {
        super(config);
    }
    
    public PDA_ASSET_CHECKDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PDA__ASSET__CHECK\" (" + //
                "\"CHECK__ID\" INTEGER PRIMARY KEY ," + // 0: CHECK_ID
                "\"ASSET__ID\" INTEGER," + // 1: ASSET_ID
                "\"QCPC\" TEXT," + // 2: QCPC
                "\"PDA__ID\" TEXT," + // 3: PDA_ID
                "\"CHECK__TYPE\" TEXT," + // 4: CHECK_TYPE
                "\"DS__TYPE\" TEXT," + // 5: DS_TYPE
                "\"IS__CHANGE\" INTEGER," + // 6: IS_CHANGE
                "\"CHANGE__DEPT\" TEXT," + // 7: CHANGE_DEPT
                "\"IS__CHANGE__DD\" INTEGER," + // 8: IS_CHANGE_DD
                "\"CHANGE__DDID\" TEXT," + // 9: CHANGE_DDID
                "\"ASSET__CHECK__ID\" TEXT," + // 10: ASSET_CHECK_ID
                "\"ASSET__CHECK__NAME\" TEXT," + // 11: ASSET_CHECK_NAME
                "\"ASSET__CHECK__DATE\" INTEGER," + // 12: ASSET_CHECK_DATE
                "\"ASSET__CHECKER__ID\" TEXT," + // 13: ASSET_CHECKER_ID
                "\"ASSET__CHECKER__NAME\" TEXT," + // 14: ASSET_CHECKER_NAME
                "\"ASSET__CHECKER__DATE\" INTEGER," + // 15: ASSET_CHECKER_DATE
                "\"ASSET__COLLATE__ID\" TEXT," + // 16: ASSET_COLLATE_ID
                "\"ASSET__COLLATE__NAME\" TEXT," + // 17: ASSET_COLLATE_NAME
                "\"ASSET__COLLATE__DATE\" INTEGER," + // 18: ASSET_COLLATE_DATE
                "\"BGRID\" INTEGER," + // 19: BGRID
                "\"BGRXM\" TEXT," + // 20: BGRXM
                "\"ASSET__SYNC__FLAG\" INTEGER," + // 21: ASSET_SYNC_FLAG
                "\"ASSET__SYNC__DATE\" INTEGER," + // 22: ASSET_SYNC_DATE
                "\"REMARKS\" TEXT," + // 23: REMARKS
                "\"DDID\" TEXT," + // 24: DDID
                "\"KSID\" TEXT," + // 25: KSID
                "\"DQDDID\" TEXT," + // 26: DQDDID
                "\"DQKSID\" TEXT," + // 27: DQKSID
                "\"DQDDMC\" TEXT," + // 28: DQDDMC
                "\"UUID\" TEXT," + // 29: UUID
                "\"LABEL__DEFAULT__NAME\" TEXT);"); // 30: LABEL_DEFAULT_NAME
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PDA__ASSET__CHECK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PDA_ASSET_CHECK entity) {
        stmt.clearBindings();
 
        Long CHECK_ID = entity.getCHECK_ID();
        if (CHECK_ID != null) {
            stmt.bindLong(1, CHECK_ID);
        }
 
        Long ASSET_ID = entity.getASSET_ID();
        if (ASSET_ID != null) {
            stmt.bindLong(2, ASSET_ID);
        }
 
        String QCPC = entity.getQCPC();
        if (QCPC != null) {
            stmt.bindString(3, QCPC);
        }
 
        String PDA_ID = entity.getPDA_ID();
        if (PDA_ID != null) {
            stmt.bindString(4, PDA_ID);
        }
 
        String CHECK_TYPE = entity.getCHECK_TYPE();
        if (CHECK_TYPE != null) {
            stmt.bindString(5, CHECK_TYPE);
        }
 
        String DS_TYPE = entity.getDS_TYPE();
        if (DS_TYPE != null) {
            stmt.bindString(6, DS_TYPE);
        }
 
        Integer IS_CHANGE = entity.getIS_CHANGE();
        if (IS_CHANGE != null) {
            stmt.bindLong(7, IS_CHANGE);
        }
 
        String CHANGE_DEPT = entity.getCHANGE_DEPT();
        if (CHANGE_DEPT != null) {
            stmt.bindString(8, CHANGE_DEPT);
        }
 
        Integer IS_CHANGE_DD = entity.getIS_CHANGE_DD();
        if (IS_CHANGE_DD != null) {
            stmt.bindLong(9, IS_CHANGE_DD);
        }
 
        String CHANGE_DDID = entity.getCHANGE_DDID();
        if (CHANGE_DDID != null) {
            stmt.bindString(10, CHANGE_DDID);
        }
 
        String ASSET_CHECK_ID = entity.getASSET_CHECK_ID();
        if (ASSET_CHECK_ID != null) {
            stmt.bindString(11, ASSET_CHECK_ID);
        }
 
        String ASSET_CHECK_NAME = entity.getASSET_CHECK_NAME();
        if (ASSET_CHECK_NAME != null) {
            stmt.bindString(12, ASSET_CHECK_NAME);
        }
 
        java.util.Date ASSET_CHECK_DATE = entity.getASSET_CHECK_DATE();
        if (ASSET_CHECK_DATE != null) {
            stmt.bindLong(13, ASSET_CHECK_DATE.getTime());
        }
 
        String ASSET_CHECKER_ID = entity.getASSET_CHECKER_ID();
        if (ASSET_CHECKER_ID != null) {
            stmt.bindString(14, ASSET_CHECKER_ID);
        }
 
        String ASSET_CHECKER_NAME = entity.getASSET_CHECKER_NAME();
        if (ASSET_CHECKER_NAME != null) {
            stmt.bindString(15, ASSET_CHECKER_NAME);
        }
 
        java.util.Date ASSET_CHECKER_DATE = entity.getASSET_CHECKER_DATE();
        if (ASSET_CHECKER_DATE != null) {
            stmt.bindLong(16, ASSET_CHECKER_DATE.getTime());
        }
 
        String ASSET_COLLATE_ID = entity.getASSET_COLLATE_ID();
        if (ASSET_COLLATE_ID != null) {
            stmt.bindString(17, ASSET_COLLATE_ID);
        }
 
        String ASSET_COLLATE_NAME = entity.getASSET_COLLATE_NAME();
        if (ASSET_COLLATE_NAME != null) {
            stmt.bindString(18, ASSET_COLLATE_NAME);
        }
 
        java.util.Date ASSET_COLLATE_DATE = entity.getASSET_COLLATE_DATE();
        if (ASSET_COLLATE_DATE != null) {
            stmt.bindLong(19, ASSET_COLLATE_DATE.getTime());
        }
 
        Integer BGRID = entity.getBGRID();
        if (BGRID != null) {
            stmt.bindLong(20, BGRID);
        }
 
        String BGRXM = entity.getBGRXM();
        if (BGRXM != null) {
            stmt.bindString(21, BGRXM);
        }
 
        Integer ASSET_SYNC_FLAG = entity.getASSET_SYNC_FLAG();
        if (ASSET_SYNC_FLAG != null) {
            stmt.bindLong(22, ASSET_SYNC_FLAG);
        }
 
        java.util.Date ASSET_SYNC_DATE = entity.getASSET_SYNC_DATE();
        if (ASSET_SYNC_DATE != null) {
            stmt.bindLong(23, ASSET_SYNC_DATE.getTime());
        }
 
        String REMARKS = entity.getREMARKS();
        if (REMARKS != null) {
            stmt.bindString(24, REMARKS);
        }
 
        String DDID = entity.getDDID();
        if (DDID != null) {
            stmt.bindString(25, DDID);
        }
 
        String KSID = entity.getKSID();
        if (KSID != null) {
            stmt.bindString(26, KSID);
        }
 
        String DQDDID = entity.getDQDDID();
        if (DQDDID != null) {
            stmt.bindString(27, DQDDID);
        }
 
        String DQKSID = entity.getDQKSID();
        if (DQKSID != null) {
            stmt.bindString(28, DQKSID);
        }
 
        String DQDDMC = entity.getDQDDMC();
        if (DQDDMC != null) {
            stmt.bindString(29, DQDDMC);
        }
 
        String UUID = entity.getUUID();
        if (UUID != null) {
            stmt.bindString(30, UUID);
        }
 
        String LABEL_DEFAULT_NAME = entity.getLABEL_DEFAULT_NAME();
        if (LABEL_DEFAULT_NAME != null) {
            stmt.bindString(31, LABEL_DEFAULT_NAME);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PDA_ASSET_CHECK entity) {
        stmt.clearBindings();
 
        Long CHECK_ID = entity.getCHECK_ID();
        if (CHECK_ID != null) {
            stmt.bindLong(1, CHECK_ID);
        }
 
        Long ASSET_ID = entity.getASSET_ID();
        if (ASSET_ID != null) {
            stmt.bindLong(2, ASSET_ID);
        }
 
        String QCPC = entity.getQCPC();
        if (QCPC != null) {
            stmt.bindString(3, QCPC);
        }
 
        String PDA_ID = entity.getPDA_ID();
        if (PDA_ID != null) {
            stmt.bindString(4, PDA_ID);
        }
 
        String CHECK_TYPE = entity.getCHECK_TYPE();
        if (CHECK_TYPE != null) {
            stmt.bindString(5, CHECK_TYPE);
        }
 
        String DS_TYPE = entity.getDS_TYPE();
        if (DS_TYPE != null) {
            stmt.bindString(6, DS_TYPE);
        }
 
        Integer IS_CHANGE = entity.getIS_CHANGE();
        if (IS_CHANGE != null) {
            stmt.bindLong(7, IS_CHANGE);
        }
 
        String CHANGE_DEPT = entity.getCHANGE_DEPT();
        if (CHANGE_DEPT != null) {
            stmt.bindString(8, CHANGE_DEPT);
        }
 
        Integer IS_CHANGE_DD = entity.getIS_CHANGE_DD();
        if (IS_CHANGE_DD != null) {
            stmt.bindLong(9, IS_CHANGE_DD);
        }
 
        String CHANGE_DDID = entity.getCHANGE_DDID();
        if (CHANGE_DDID != null) {
            stmt.bindString(10, CHANGE_DDID);
        }
 
        String ASSET_CHECK_ID = entity.getASSET_CHECK_ID();
        if (ASSET_CHECK_ID != null) {
            stmt.bindString(11, ASSET_CHECK_ID);
        }
 
        String ASSET_CHECK_NAME = entity.getASSET_CHECK_NAME();
        if (ASSET_CHECK_NAME != null) {
            stmt.bindString(12, ASSET_CHECK_NAME);
        }
 
        java.util.Date ASSET_CHECK_DATE = entity.getASSET_CHECK_DATE();
        if (ASSET_CHECK_DATE != null) {
            stmt.bindLong(13, ASSET_CHECK_DATE.getTime());
        }
 
        String ASSET_CHECKER_ID = entity.getASSET_CHECKER_ID();
        if (ASSET_CHECKER_ID != null) {
            stmt.bindString(14, ASSET_CHECKER_ID);
        }
 
        String ASSET_CHECKER_NAME = entity.getASSET_CHECKER_NAME();
        if (ASSET_CHECKER_NAME != null) {
            stmt.bindString(15, ASSET_CHECKER_NAME);
        }
 
        java.util.Date ASSET_CHECKER_DATE = entity.getASSET_CHECKER_DATE();
        if (ASSET_CHECKER_DATE != null) {
            stmt.bindLong(16, ASSET_CHECKER_DATE.getTime());
        }
 
        String ASSET_COLLATE_ID = entity.getASSET_COLLATE_ID();
        if (ASSET_COLLATE_ID != null) {
            stmt.bindString(17, ASSET_COLLATE_ID);
        }
 
        String ASSET_COLLATE_NAME = entity.getASSET_COLLATE_NAME();
        if (ASSET_COLLATE_NAME != null) {
            stmt.bindString(18, ASSET_COLLATE_NAME);
        }
 
        java.util.Date ASSET_COLLATE_DATE = entity.getASSET_COLLATE_DATE();
        if (ASSET_COLLATE_DATE != null) {
            stmt.bindLong(19, ASSET_COLLATE_DATE.getTime());
        }
 
        Integer BGRID = entity.getBGRID();
        if (BGRID != null) {
            stmt.bindLong(20, BGRID);
        }
 
        String BGRXM = entity.getBGRXM();
        if (BGRXM != null) {
            stmt.bindString(21, BGRXM);
        }
 
        Integer ASSET_SYNC_FLAG = entity.getASSET_SYNC_FLAG();
        if (ASSET_SYNC_FLAG != null) {
            stmt.bindLong(22, ASSET_SYNC_FLAG);
        }
 
        java.util.Date ASSET_SYNC_DATE = entity.getASSET_SYNC_DATE();
        if (ASSET_SYNC_DATE != null) {
            stmt.bindLong(23, ASSET_SYNC_DATE.getTime());
        }
 
        String REMARKS = entity.getREMARKS();
        if (REMARKS != null) {
            stmt.bindString(24, REMARKS);
        }
 
        String DDID = entity.getDDID();
        if (DDID != null) {
            stmt.bindString(25, DDID);
        }
 
        String KSID = entity.getKSID();
        if (KSID != null) {
            stmt.bindString(26, KSID);
        }
 
        String DQDDID = entity.getDQDDID();
        if (DQDDID != null) {
            stmt.bindString(27, DQDDID);
        }
 
        String DQKSID = entity.getDQKSID();
        if (DQKSID != null) {
            stmt.bindString(28, DQKSID);
        }
 
        String DQDDMC = entity.getDQDDMC();
        if (DQDDMC != null) {
            stmt.bindString(29, DQDDMC);
        }
 
        String UUID = entity.getUUID();
        if (UUID != null) {
            stmt.bindString(30, UUID);
        }
 
        String LABEL_DEFAULT_NAME = entity.getLABEL_DEFAULT_NAME();
        if (LABEL_DEFAULT_NAME != null) {
            stmt.bindString(31, LABEL_DEFAULT_NAME);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PDA_ASSET_CHECK readEntity(Cursor cursor, int offset) {
        PDA_ASSET_CHECK entity = new PDA_ASSET_CHECK( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // CHECK_ID
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // ASSET_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // QCPC
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // PDA_ID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CHECK_TYPE
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // DS_TYPE
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // IS_CHANGE
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // CHANGE_DEPT
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // IS_CHANGE_DD
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // CHANGE_DDID
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ASSET_CHECK_ID
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // ASSET_CHECK_NAME
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // ASSET_CHECK_DATE
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // ASSET_CHECKER_ID
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // ASSET_CHECKER_NAME
            cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)), // ASSET_CHECKER_DATE
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // ASSET_COLLATE_ID
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // ASSET_COLLATE_NAME
            cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)), // ASSET_COLLATE_DATE
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // BGRID
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // BGRXM
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // ASSET_SYNC_FLAG
            cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)), // ASSET_SYNC_DATE
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // REMARKS
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // DDID
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // KSID
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // DQDDID
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // DQKSID
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // DQDDMC
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // UUID
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30) // LABEL_DEFAULT_NAME
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PDA_ASSET_CHECK entity, int offset) {
        entity.setCHECK_ID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setASSET_ID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setQCPC(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPDA_ID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCHECK_TYPE(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDS_TYPE(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIS_CHANGE(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setCHANGE_DEPT(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIS_CHANGE_DD(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setCHANGE_DDID(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setASSET_CHECK_ID(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setASSET_CHECK_NAME(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setASSET_CHECK_DATE(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setASSET_CHECKER_ID(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setASSET_CHECKER_NAME(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setASSET_CHECKER_DATE(cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)));
        entity.setASSET_COLLATE_ID(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setASSET_COLLATE_NAME(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setASSET_COLLATE_DATE(cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)));
        entity.setBGRID(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setBGRXM(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setASSET_SYNC_FLAG(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setASSET_SYNC_DATE(cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)));
        entity.setREMARKS(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setDDID(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setKSID(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setDQDDID(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setDQKSID(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setDQDDMC(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setUUID(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setLABEL_DEFAULT_NAME(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PDA_ASSET_CHECK entity, long rowId) {
        entity.setCHECK_ID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PDA_ASSET_CHECK entity) {
        if(entity != null) {
            return entity.getCHECK_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PDA_ASSET_CHECK entity) {
        return entity.getCHECK_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
