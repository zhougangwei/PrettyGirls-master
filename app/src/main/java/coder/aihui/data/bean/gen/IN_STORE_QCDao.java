package coder.aihui.data.bean.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import coder.aihui.data.bean.IN_STORE_QC;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IN__STORE__QC".
*/
public class IN_STORE_QCDao extends AbstractDao<IN_STORE_QC, Long> {

    public static final String TABLENAME = "IN__STORE__QC";

    /**
     * Properties of entity IN_STORE_QC.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property QCID = new Property(0, Long.class, "QCID", true, "QCID");
        public final static Property QCKS = new Property(1, String.class, "QCKS", false, "QCKS");
        public final static Property QCDL = new Property(2, String.class, "QCDL", false, "QCDL");
        public final static Property QCPC = new Property(3, String.class, "QCPC", false, "QCPC");
        public final static Property QCKF = new Property(4, String.class, "QCKF", false, "QCKF");
        public final static Property QCZT = new Property(5, Integer.class, "QCZT", false, "QCZT");
        public final static Property QC_UPDATE_USER = new Property(6, Integer.class, "QC_UPDATE_USER", false, "QC__UPDATE__USER");
        public final static Property QC_CREATE_USER = new Property(7, Integer.class, "QC_CREATE_USER", false, "QC__CREATE__USER");
        public final static Property QC_CREATE_DATE = new Property(8, java.util.Date.class, "QC_CREATE_DATE", false, "QC__CREATE__DATE");
        public final static Property QC_UPDATE_DATE = new Property(9, java.util.Date.class, "QC_UPDATE_DATE", false, "QC__UPDATE__DATE");
        public final static Property QCJSSJ = new Property(10, java.util.Date.class, "QCJSSJ", false, "QCJSSJ");
        public final static Property QCKSSJ = new Property(11, java.util.Date.class, "QCKSSJ", false, "QCKSSJ");
    }


    public IN_STORE_QCDao(DaoConfig config) {
        super(config);
    }
    
    public IN_STORE_QCDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IN__STORE__QC\" (" + //
                "\"QCID\" INTEGER PRIMARY KEY ," + // 0: QCID
                "\"QCKS\" TEXT," + // 1: QCKS
                "\"QCDL\" TEXT," + // 2: QCDL
                "\"QCPC\" TEXT," + // 3: QCPC
                "\"QCKF\" TEXT," + // 4: QCKF
                "\"QCZT\" INTEGER," + // 5: QCZT
                "\"QC__UPDATE__USER\" INTEGER," + // 6: QC_UPDATE_USER
                "\"QC__CREATE__USER\" INTEGER," + // 7: QC_CREATE_USER
                "\"QC__CREATE__DATE\" INTEGER," + // 8: QC_CREATE_DATE
                "\"QC__UPDATE__DATE\" INTEGER," + // 9: QC_UPDATE_DATE
                "\"QCJSSJ\" INTEGER," + // 10: QCJSSJ
                "\"QCKSSJ\" INTEGER);"); // 11: QCKSSJ
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IN__STORE__QC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IN_STORE_QC entity) {
        stmt.clearBindings();
 
        Long QCID = entity.getQCID();
        if (QCID != null) {
            stmt.bindLong(1, QCID);
        }
 
        String QCKS = entity.getQCKS();
        if (QCKS != null) {
            stmt.bindString(2, QCKS);
        }
 
        String QCDL = entity.getQCDL();
        if (QCDL != null) {
            stmt.bindString(3, QCDL);
        }
 
        String QCPC = entity.getQCPC();
        if (QCPC != null) {
            stmt.bindString(4, QCPC);
        }
 
        String QCKF = entity.getQCKF();
        if (QCKF != null) {
            stmt.bindString(5, QCKF);
        }
 
        Integer QCZT = entity.getQCZT();
        if (QCZT != null) {
            stmt.bindLong(6, QCZT);
        }
 
        Integer QC_UPDATE_USER = entity.getQC_UPDATE_USER();
        if (QC_UPDATE_USER != null) {
            stmt.bindLong(7, QC_UPDATE_USER);
        }
 
        Integer QC_CREATE_USER = entity.getQC_CREATE_USER();
        if (QC_CREATE_USER != null) {
            stmt.bindLong(8, QC_CREATE_USER);
        }
 
        java.util.Date QC_CREATE_DATE = entity.getQC_CREATE_DATE();
        if (QC_CREATE_DATE != null) {
            stmt.bindLong(9, QC_CREATE_DATE.getTime());
        }
 
        java.util.Date QC_UPDATE_DATE = entity.getQC_UPDATE_DATE();
        if (QC_UPDATE_DATE != null) {
            stmt.bindLong(10, QC_UPDATE_DATE.getTime());
        }
 
        java.util.Date QCJSSJ = entity.getQCJSSJ();
        if (QCJSSJ != null) {
            stmt.bindLong(11, QCJSSJ.getTime());
        }
 
        java.util.Date QCKSSJ = entity.getQCKSSJ();
        if (QCKSSJ != null) {
            stmt.bindLong(12, QCKSSJ.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IN_STORE_QC entity) {
        stmt.clearBindings();
 
        Long QCID = entity.getQCID();
        if (QCID != null) {
            stmt.bindLong(1, QCID);
        }
 
        String QCKS = entity.getQCKS();
        if (QCKS != null) {
            stmt.bindString(2, QCKS);
        }
 
        String QCDL = entity.getQCDL();
        if (QCDL != null) {
            stmt.bindString(3, QCDL);
        }
 
        String QCPC = entity.getQCPC();
        if (QCPC != null) {
            stmt.bindString(4, QCPC);
        }
 
        String QCKF = entity.getQCKF();
        if (QCKF != null) {
            stmt.bindString(5, QCKF);
        }
 
        Integer QCZT = entity.getQCZT();
        if (QCZT != null) {
            stmt.bindLong(6, QCZT);
        }
 
        Integer QC_UPDATE_USER = entity.getQC_UPDATE_USER();
        if (QC_UPDATE_USER != null) {
            stmt.bindLong(7, QC_UPDATE_USER);
        }
 
        Integer QC_CREATE_USER = entity.getQC_CREATE_USER();
        if (QC_CREATE_USER != null) {
            stmt.bindLong(8, QC_CREATE_USER);
        }
 
        java.util.Date QC_CREATE_DATE = entity.getQC_CREATE_DATE();
        if (QC_CREATE_DATE != null) {
            stmt.bindLong(9, QC_CREATE_DATE.getTime());
        }
 
        java.util.Date QC_UPDATE_DATE = entity.getQC_UPDATE_DATE();
        if (QC_UPDATE_DATE != null) {
            stmt.bindLong(10, QC_UPDATE_DATE.getTime());
        }
 
        java.util.Date QCJSSJ = entity.getQCJSSJ();
        if (QCJSSJ != null) {
            stmt.bindLong(11, QCJSSJ.getTime());
        }
 
        java.util.Date QCKSSJ = entity.getQCKSSJ();
        if (QCKSSJ != null) {
            stmt.bindLong(12, QCKSSJ.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public IN_STORE_QC readEntity(Cursor cursor, int offset) {
        IN_STORE_QC entity = new IN_STORE_QC( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // QCID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // QCKS
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // QCDL
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // QCPC
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // QCKF
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // QCZT
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // QC_UPDATE_USER
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // QC_CREATE_USER
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // QC_CREATE_DATE
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // QC_UPDATE_DATE
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // QCJSSJ
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)) // QCKSSJ
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IN_STORE_QC entity, int offset) {
        entity.setQCID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQCKS(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setQCDL(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setQCPC(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setQCKF(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQCZT(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setQC_UPDATE_USER(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setQC_CREATE_USER(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setQC_CREATE_DATE(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setQC_UPDATE_DATE(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setQCJSSJ(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setQCKSSJ(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IN_STORE_QC entity, long rowId) {
        entity.setQCID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IN_STORE_QC entity) {
        if(entity != null) {
            return entity.getQCID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IN_STORE_QC entity) {
        return entity.getQCID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
