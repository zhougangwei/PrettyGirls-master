package coder.aihui.data.bean.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import coder.aihui.data.bean.INSPECT_REP_PIC;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INSPECT__REP__PIC".
*/
public class INSPECT_REP_PICDao extends AbstractDao<INSPECT_REP_PIC, Long> {

    public static final String TABLENAME = "INSPECT__REP__PIC";

    /**
     * Properties of entity INSPECT_REP_PIC.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property INSPP_ID = new Property(0, Long.class, "INSPP_ID", true, "INSPP__ID");
        public final static Property INSPR_REP_ID = new Property(1, Long.class, "INSPR_REP_ID", false, "INSPR__REP__ID");
        public final static Property PUUID = new Property(2, String.class, "PUUID", false, "PUUID");
        public final static Property UUID = new Property(3, String.class, "UUID", false, "UUID");
        public final static Property URL = new Property(4, String.class, "URL", false, "URL");
        public final static Property SYNC_DATE = new Property(5, java.util.Date.class, "SYNC_DATE", false, "SYNC__DATE");
        public final static Property SYNC_FLAG = new Property(6, Integer.class, "SYNC_FLAG", false, "SYNC__FLAG");
        public final static Property SMALL_URL = new Property(7, String.class, "SMALL_URL", false, "SMALL__URL");
        public final static Property UP_FILE_ID = new Property(8, Integer.class, "UP_FILE_ID", false, "UP__FILE__ID");
        public final static Property UP_FILE_TYPE = new Property(9, Integer.class, "UP_FILE_TYPE", false, "UP__FILE__TYPE");
    }


    public INSPECT_REP_PICDao(DaoConfig config) {
        super(config);
    }
    
    public INSPECT_REP_PICDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INSPECT__REP__PIC\" (" + //
                "\"INSPP__ID\" INTEGER PRIMARY KEY ," + // 0: INSPP_ID
                "\"INSPR__REP__ID\" INTEGER," + // 1: INSPR_REP_ID
                "\"PUUID\" TEXT," + // 2: PUUID
                "\"UUID\" TEXT," + // 3: UUID
                "\"URL\" TEXT," + // 4: URL
                "\"SYNC__DATE\" INTEGER," + // 5: SYNC_DATE
                "\"SYNC__FLAG\" INTEGER," + // 6: SYNC_FLAG
                "\"SMALL__URL\" TEXT," + // 7: SMALL_URL
                "\"UP__FILE__ID\" INTEGER," + // 8: UP_FILE_ID
                "\"UP__FILE__TYPE\" INTEGER);"); // 9: UP_FILE_TYPE
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INSPECT__REP__PIC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, INSPECT_REP_PIC entity) {
        stmt.clearBindings();
 
        Long INSPP_ID = entity.getINSPP_ID();
        if (INSPP_ID != null) {
            stmt.bindLong(1, INSPP_ID);
        }
 
        Long INSPR_REP_ID = entity.getINSPR_REP_ID();
        if (INSPR_REP_ID != null) {
            stmt.bindLong(2, INSPR_REP_ID);
        }
 
        String PUUID = entity.getPUUID();
        if (PUUID != null) {
            stmt.bindString(3, PUUID);
        }
 
        String UUID = entity.getUUID();
        if (UUID != null) {
            stmt.bindString(4, UUID);
        }
 
        String URL = entity.getURL();
        if (URL != null) {
            stmt.bindString(5, URL);
        }
 
        java.util.Date SYNC_DATE = entity.getSYNC_DATE();
        if (SYNC_DATE != null) {
            stmt.bindLong(6, SYNC_DATE.getTime());
        }
 
        Integer SYNC_FLAG = entity.getSYNC_FLAG();
        if (SYNC_FLAG != null) {
            stmt.bindLong(7, SYNC_FLAG);
        }
 
        String SMALL_URL = entity.getSMALL_URL();
        if (SMALL_URL != null) {
            stmt.bindString(8, SMALL_URL);
        }
 
        Integer UP_FILE_ID = entity.getUP_FILE_ID();
        if (UP_FILE_ID != null) {
            stmt.bindLong(9, UP_FILE_ID);
        }
 
        Integer UP_FILE_TYPE = entity.getUP_FILE_TYPE();
        if (UP_FILE_TYPE != null) {
            stmt.bindLong(10, UP_FILE_TYPE);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, INSPECT_REP_PIC entity) {
        stmt.clearBindings();
 
        Long INSPP_ID = entity.getINSPP_ID();
        if (INSPP_ID != null) {
            stmt.bindLong(1, INSPP_ID);
        }
 
        Long INSPR_REP_ID = entity.getINSPR_REP_ID();
        if (INSPR_REP_ID != null) {
            stmt.bindLong(2, INSPR_REP_ID);
        }
 
        String PUUID = entity.getPUUID();
        if (PUUID != null) {
            stmt.bindString(3, PUUID);
        }
 
        String UUID = entity.getUUID();
        if (UUID != null) {
            stmt.bindString(4, UUID);
        }
 
        String URL = entity.getURL();
        if (URL != null) {
            stmt.bindString(5, URL);
        }
 
        java.util.Date SYNC_DATE = entity.getSYNC_DATE();
        if (SYNC_DATE != null) {
            stmt.bindLong(6, SYNC_DATE.getTime());
        }
 
        Integer SYNC_FLAG = entity.getSYNC_FLAG();
        if (SYNC_FLAG != null) {
            stmt.bindLong(7, SYNC_FLAG);
        }
 
        String SMALL_URL = entity.getSMALL_URL();
        if (SMALL_URL != null) {
            stmt.bindString(8, SMALL_URL);
        }
 
        Integer UP_FILE_ID = entity.getUP_FILE_ID();
        if (UP_FILE_ID != null) {
            stmt.bindLong(9, UP_FILE_ID);
        }
 
        Integer UP_FILE_TYPE = entity.getUP_FILE_TYPE();
        if (UP_FILE_TYPE != null) {
            stmt.bindLong(10, UP_FILE_TYPE);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public INSPECT_REP_PIC readEntity(Cursor cursor, int offset) {
        INSPECT_REP_PIC entity = new INSPECT_REP_PIC( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // INSPP_ID
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // INSPR_REP_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // PUUID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // UUID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // URL
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // SYNC_DATE
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // SYNC_FLAG
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // SMALL_URL
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // UP_FILE_ID
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // UP_FILE_TYPE
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, INSPECT_REP_PIC entity, int offset) {
        entity.setINSPP_ID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setINSPR_REP_ID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setPUUID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUUID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setURL(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSYNC_DATE(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setSYNC_FLAG(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setSMALL_URL(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUP_FILE_ID(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setUP_FILE_TYPE(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(INSPECT_REP_PIC entity, long rowId) {
        entity.setINSPP_ID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(INSPECT_REP_PIC entity) {
        if(entity != null) {
            return entity.getINSPP_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(INSPECT_REP_PIC entity) {
        return entity.getINSPP_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
