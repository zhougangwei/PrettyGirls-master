package coder.aihui.data.bean.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import coder.aihui.data.bean.PUR_CONTRACT_PLAN_DETAIL;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PUR__CONTRACT__PLAN__DETAIL".
*/
public class PUR_CONTRACT_PLAN_DETAILDao extends AbstractDao<PUR_CONTRACT_PLAN_DETAIL, Long> {

    public static final String TABLENAME = "PUR__CONTRACT__PLAN__DETAIL";

    /**
     * Properties of entity PUR_CONTRACT_PLAN_DETAIL.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property HTMX_ID = new Property(1, Long.class, "HTMX_ID", false, "HTMX__ID");
        public final static Property CONTRACT_ID = new Property(2, Integer.class, "CONTRACT_ID", false, "CONTRACT__ID");
        public final static Property CONTRACT_NUM = new Property(3, String.class, "CONTRACT_NUM", false, "CONTRACT__NUM");
        public final static Property PLAN_ID = new Property(4, Integer.class, "PLAN_ID", false, "PLAN__ID");
        public final static Property DEPT_ID = new Property(5, Integer.class, "DEPT_ID", false, "DEPT__ID");
        public final static Property DEPT_NAME = new Property(6, String.class, "DEPT_NAME", false, "DEPT__NAME");
        public final static Property WZMC = new Property(7, String.class, "WZMC", false, "WZMC");
        public final static Property YSSL = new Property(8, Integer.class, "YSSL", false, "YSSL");
        public final static Property MCGGID = new Property(9, Integer.class, "MCGGID", false, "MCGGID");
        public final static Property GYSMC = new Property(10, String.class, "GYSMC", false, "GYSMC");
        public final static Property GGXH = new Property(11, String.class, "GGXH", false, "GGXH");
        public final static Property CHECK_SL = new Property(12, Integer.class, "CHECK_SL", false, "CHECK__SL");
        public final static Property CHECK_STATUS = new Property(13, Integer.class, "CHECK_STATUS", false, "CHECK__STATUS");
        public final static Property DH_ID = new Property(14, String.class, "DH_ID", false, "DH__ID");
        public final static Property CHECK_ISCHECKED = new Property(15, Boolean.class, "CHECK_ISCHECKED", false, "CHECK__ISCHECKED");
        public final static Property ALQJ = new Property(16, Integer.class, "ALQJ", false, "ALQJ");
        public final static Property JLZM = new Property(17, Integer.class, "JLZM", false, "JLZM");
        public final static Property WGJC = new Property(18, Integer.class, "WGJC", false, "WGJC");
        public final static Property HWQD = new Property(19, Integer.class, "HWQD", false, "HWQD");
        public final static Property YQGZQK = new Property(20, Integer.class, "YQGZQK", false, "YQGZQK");
        public final static Property DQAQJC = new Property(21, Integer.class, "DQAQJC", false, "DQAQJC");
        public final static Property CCBH = new Property(22, String.class, "CCBH", false, "CCBH");
        public final static Property YSSJ = new Property(23, java.util.Date.class, "YSSJ", false, "YSSJ");
        public final static Property PUR_YSR_ID = new Property(24, Integer.class, "PUR_YSR_ID", false, "PUR__YSR__ID");
        public final static Property JQZP_FILE_ID = new Property(25, Integer.class, "JQZP_FILE_ID", false, "JQZP__FILE__ID");
        public final static Property JDSQ_FILE_ID = new Property(26, Integer.class, "JDSQ_FILE_ID", false, "JDSQ__FILE__ID");
        public final static Property ZMZP_URL = new Property(27, String.class, "ZMZP_URL", false, "ZMZP__URL");
        public final static Property CMZP_URL = new Property(28, String.class, "CMZP_URL", false, "CMZP__URL");
        public final static Property IS_UP = new Property(29, Integer.class, "IS_UP", false, "IS__UP");
        public final static Property JYSYNX = new Property(30, Float.class, "JYSYNX", false, "JYSYNX");
        public final static Property ZCZH = new Property(31, String.class, "ZCZH", false, "ZCZH");
        public final static Property QSDQSJ = new Property(32, java.util.Date.class, "QSDQSJ", false, "QSDQSJ");
        public final static Property YSR_IDS = new Property(33, String.class, "YSR_IDS", false, "YSR__IDS");
        public final static Property PARTS = new Property(34, String.class, "PARTS", false, "PARTS");
        public final static Property KSQSR_FILE_URL = new Property(35, String.class, "KSQSR_FILE_URL", false, "KSQSR__FILE__URL");
        public final static Property KSQSR_FILE_ID = new Property(36, Integer.class, "KSQSR_FILE_ID", false, "KSQSR__FILE__ID");
        public final static Property QMID = new Property(37, String.class, "QMID", false, "QMID");
        public final static Property ESC_RECORD = new Property(38, String.class, "ESC_RECORD", false, "ESC__RECORD");
        public final static Property ESC_RECORDS = new Property(39, String.class, "ESC_RECORDS", false, "ESC__RECORDS");
        public final static Property KSQSR_ID = new Property(40, Long.class, "KSQSR_ID", false, "KSQSR__ID");
        public final static Property BXDW_ID = new Property(41, Long.class, "BXDW_ID", false, "BXDW__ID");
        public final static Property BXDW_NAME = new Property(42, String.class, "BXDW_NAME", false, "BXDW__NAME");
        public final static Property LXR_ID = new Property(43, Long.class, "LXR_ID", false, "LXR__ID");
        public final static Property LXRMC = new Property(44, String.class, "LXRMC", false, "LXRMC");
        public final static Property LXFS = new Property(45, String.class, "LXFS", false, "LXFS");
        public final static Property NEW_FLAG = new Property(46, Integer.class, "NEW_FLAG", false, "NEW__FLAG");
        public final static Property CHECK_ITEMS = new Property(47, String.class, "CHECK_ITEMS", false, "CHECK__ITEMS");
        public final static Property AZGCS = new Property(48, String.class, "AZGCS", false, "AZGCS");
        public final static Property BXQ = new Property(49, Integer.class, "BXQ", false, "BXQ");
        public final static Property GCJK = new Property(50, String.class, "GCJK", false, "GCJK");
        public final static Property BRAND = new Property(51, String.class, "BRAND", false, "BRAND");
        public final static Property BZ = new Property(52, String.class, "BZ", false, "BZ");
        public final static Property CD_AZR = new Property(53, String.class, "CD_AZR", false, "CD__AZR");
        public final static Property CD_AZRDH = new Property(54, String.class, "CD_AZRDH", false, "CD__AZRDH");
        public final static Property CD_REMARK = new Property(55, String.class, "CD_REMARK", false, "CD__REMARK");
        public final static Property BIG_FRONT_PIC = new Property(56, String.class, "BIG_FRONT_PIC", false, "BIG__FRONT__PIC");
        public final static Property BIG_SIDE_PIC = new Property(57, String.class, "BIG_SIDE_PIC", false, "BIG__SIDE__PIC");
        public final static Property BIG_MPZ_PIC = new Property(58, String.class, "BIG_MPZ_PIC", false, "BIG__MPZ__PIC");
        public final static Property MPZ_FILE_ID = new Property(59, Integer.class, "MPZ_FILE_ID", false, "MPZ__FILE__ID");
        public final static Property MPZ_URL = new Property(60, String.class, "MPZ_URL", false, "MPZ__URL");
    }


    public PUR_CONTRACT_PLAN_DETAILDao(DaoConfig config) {
        super(config);
    }
    
    public PUR_CONTRACT_PLAN_DETAILDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PUR__CONTRACT__PLAN__DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: ID
                "\"HTMX__ID\" INTEGER," + // 1: HTMX_ID
                "\"CONTRACT__ID\" INTEGER," + // 2: CONTRACT_ID
                "\"CONTRACT__NUM\" TEXT," + // 3: CONTRACT_NUM
                "\"PLAN__ID\" INTEGER," + // 4: PLAN_ID
                "\"DEPT__ID\" INTEGER," + // 5: DEPT_ID
                "\"DEPT__NAME\" TEXT," + // 6: DEPT_NAME
                "\"WZMC\" TEXT," + // 7: WZMC
                "\"YSSL\" INTEGER," + // 8: YSSL
                "\"MCGGID\" INTEGER," + // 9: MCGGID
                "\"GYSMC\" TEXT," + // 10: GYSMC
                "\"GGXH\" TEXT," + // 11: GGXH
                "\"CHECK__SL\" INTEGER," + // 12: CHECK_SL
                "\"CHECK__STATUS\" INTEGER," + // 13: CHECK_STATUS
                "\"DH__ID\" TEXT," + // 14: DH_ID
                "\"CHECK__ISCHECKED\" INTEGER," + // 15: CHECK_ISCHECKED
                "\"ALQJ\" INTEGER," + // 16: ALQJ
                "\"JLZM\" INTEGER," + // 17: JLZM
                "\"WGJC\" INTEGER," + // 18: WGJC
                "\"HWQD\" INTEGER," + // 19: HWQD
                "\"YQGZQK\" INTEGER," + // 20: YQGZQK
                "\"DQAQJC\" INTEGER," + // 21: DQAQJC
                "\"CCBH\" TEXT," + // 22: CCBH
                "\"YSSJ\" INTEGER," + // 23: YSSJ
                "\"PUR__YSR__ID\" INTEGER," + // 24: PUR_YSR_ID
                "\"JQZP__FILE__ID\" INTEGER," + // 25: JQZP_FILE_ID
                "\"JDSQ__FILE__ID\" INTEGER," + // 26: JDSQ_FILE_ID
                "\"ZMZP__URL\" TEXT," + // 27: ZMZP_URL
                "\"CMZP__URL\" TEXT," + // 28: CMZP_URL
                "\"IS__UP\" INTEGER," + // 29: IS_UP
                "\"JYSYNX\" REAL," + // 30: JYSYNX
                "\"ZCZH\" TEXT," + // 31: ZCZH
                "\"QSDQSJ\" INTEGER," + // 32: QSDQSJ
                "\"YSR__IDS\" TEXT," + // 33: YSR_IDS
                "\"PARTS\" TEXT," + // 34: PARTS
                "\"KSQSR__FILE__URL\" TEXT," + // 35: KSQSR_FILE_URL
                "\"KSQSR__FILE__ID\" INTEGER," + // 36: KSQSR_FILE_ID
                "\"QMID\" TEXT," + // 37: QMID
                "\"ESC__RECORD\" TEXT," + // 38: ESC_RECORD
                "\"ESC__RECORDS\" TEXT," + // 39: ESC_RECORDS
                "\"KSQSR__ID\" INTEGER," + // 40: KSQSR_ID
                "\"BXDW__ID\" INTEGER," + // 41: BXDW_ID
                "\"BXDW__NAME\" TEXT," + // 42: BXDW_NAME
                "\"LXR__ID\" INTEGER," + // 43: LXR_ID
                "\"LXRMC\" TEXT," + // 44: LXRMC
                "\"LXFS\" TEXT," + // 45: LXFS
                "\"NEW__FLAG\" INTEGER," + // 46: NEW_FLAG
                "\"CHECK__ITEMS\" TEXT," + // 47: CHECK_ITEMS
                "\"AZGCS\" TEXT," + // 48: AZGCS
                "\"BXQ\" INTEGER," + // 49: BXQ
                "\"GCJK\" TEXT," + // 50: GCJK
                "\"BRAND\" TEXT," + // 51: BRAND
                "\"BZ\" TEXT," + // 52: BZ
                "\"CD__AZR\" TEXT," + // 53: CD_AZR
                "\"CD__AZRDH\" TEXT," + // 54: CD_AZRDH
                "\"CD__REMARK\" TEXT," + // 55: CD_REMARK
                "\"BIG__FRONT__PIC\" TEXT," + // 56: BIG_FRONT_PIC
                "\"BIG__SIDE__PIC\" TEXT," + // 57: BIG_SIDE_PIC
                "\"BIG__MPZ__PIC\" TEXT," + // 58: BIG_MPZ_PIC
                "\"MPZ__FILE__ID\" INTEGER," + // 59: MPZ_FILE_ID
                "\"MPZ__URL\" TEXT);"); // 60: MPZ_URL
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PUR__CONTRACT__PLAN__DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PUR_CONTRACT_PLAN_DETAIL entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        Long HTMX_ID = entity.getHTMX_ID();
        if (HTMX_ID != null) {
            stmt.bindLong(2, HTMX_ID);
        }
 
        Integer CONTRACT_ID = entity.getCONTRACT_ID();
        if (CONTRACT_ID != null) {
            stmt.bindLong(3, CONTRACT_ID);
        }
 
        String CONTRACT_NUM = entity.getCONTRACT_NUM();
        if (CONTRACT_NUM != null) {
            stmt.bindString(4, CONTRACT_NUM);
        }
 
        Integer PLAN_ID = entity.getPLAN_ID();
        if (PLAN_ID != null) {
            stmt.bindLong(5, PLAN_ID);
        }
 
        Integer DEPT_ID = entity.getDEPT_ID();
        if (DEPT_ID != null) {
            stmt.bindLong(6, DEPT_ID);
        }
 
        String DEPT_NAME = entity.getDEPT_NAME();
        if (DEPT_NAME != null) {
            stmt.bindString(7, DEPT_NAME);
        }
 
        String WZMC = entity.getWZMC();
        if (WZMC != null) {
            stmt.bindString(8, WZMC);
        }
 
        Integer YSSL = entity.getYSSL();
        if (YSSL != null) {
            stmt.bindLong(9, YSSL);
        }
 
        Integer MCGGID = entity.getMCGGID();
        if (MCGGID != null) {
            stmt.bindLong(10, MCGGID);
        }
 
        String GYSMC = entity.getGYSMC();
        if (GYSMC != null) {
            stmt.bindString(11, GYSMC);
        }
 
        String GGXH = entity.getGGXH();
        if (GGXH != null) {
            stmt.bindString(12, GGXH);
        }
 
        Integer CHECK_SL = entity.getCHECK_SL();
        if (CHECK_SL != null) {
            stmt.bindLong(13, CHECK_SL);
        }
 
        Integer CHECK_STATUS = entity.getCHECK_STATUS();
        if (CHECK_STATUS != null) {
            stmt.bindLong(14, CHECK_STATUS);
        }
 
        String DH_ID = entity.getDH_ID();
        if (DH_ID != null) {
            stmt.bindString(15, DH_ID);
        }
 
        Boolean CHECK_ISCHECKED = entity.getCHECK_ISCHECKED();
        if (CHECK_ISCHECKED != null) {
            stmt.bindLong(16, CHECK_ISCHECKED ? 1L: 0L);
        }
 
        Integer ALQJ = entity.getALQJ();
        if (ALQJ != null) {
            stmt.bindLong(17, ALQJ);
        }
 
        Integer JLZM = entity.getJLZM();
        if (JLZM != null) {
            stmt.bindLong(18, JLZM);
        }
 
        Integer WGJC = entity.getWGJC();
        if (WGJC != null) {
            stmt.bindLong(19, WGJC);
        }
 
        Integer HWQD = entity.getHWQD();
        if (HWQD != null) {
            stmt.bindLong(20, HWQD);
        }
 
        Integer YQGZQK = entity.getYQGZQK();
        if (YQGZQK != null) {
            stmt.bindLong(21, YQGZQK);
        }
 
        Integer DQAQJC = entity.getDQAQJC();
        if (DQAQJC != null) {
            stmt.bindLong(22, DQAQJC);
        }
 
        String CCBH = entity.getCCBH();
        if (CCBH != null) {
            stmt.bindString(23, CCBH);
        }
 
        java.util.Date YSSJ = entity.getYSSJ();
        if (YSSJ != null) {
            stmt.bindLong(24, YSSJ.getTime());
        }
 
        Integer PUR_YSR_ID = entity.getPUR_YSR_ID();
        if (PUR_YSR_ID != null) {
            stmt.bindLong(25, PUR_YSR_ID);
        }
 
        Integer JQZP_FILE_ID = entity.getJQZP_FILE_ID();
        if (JQZP_FILE_ID != null) {
            stmt.bindLong(26, JQZP_FILE_ID);
        }
 
        Integer JDSQ_FILE_ID = entity.getJDSQ_FILE_ID();
        if (JDSQ_FILE_ID != null) {
            stmt.bindLong(27, JDSQ_FILE_ID);
        }
 
        String ZMZP_URL = entity.getZMZP_URL();
        if (ZMZP_URL != null) {
            stmt.bindString(28, ZMZP_URL);
        }
 
        String CMZP_URL = entity.getCMZP_URL();
        if (CMZP_URL != null) {
            stmt.bindString(29, CMZP_URL);
        }
 
        Integer IS_UP = entity.getIS_UP();
        if (IS_UP != null) {
            stmt.bindLong(30, IS_UP);
        }
 
        Float JYSYNX = entity.getJYSYNX();
        if (JYSYNX != null) {
            stmt.bindDouble(31, JYSYNX);
        }
 
        String ZCZH = entity.getZCZH();
        if (ZCZH != null) {
            stmt.bindString(32, ZCZH);
        }
 
        java.util.Date QSDQSJ = entity.getQSDQSJ();
        if (QSDQSJ != null) {
            stmt.bindLong(33, QSDQSJ.getTime());
        }
 
        String YSR_IDS = entity.getYSR_IDS();
        if (YSR_IDS != null) {
            stmt.bindString(34, YSR_IDS);
        }
 
        String PARTS = entity.getPARTS();
        if (PARTS != null) {
            stmt.bindString(35, PARTS);
        }
 
        String KSQSR_FILE_URL = entity.getKSQSR_FILE_URL();
        if (KSQSR_FILE_URL != null) {
            stmt.bindString(36, KSQSR_FILE_URL);
        }
 
        Integer KSQSR_FILE_ID = entity.getKSQSR_FILE_ID();
        if (KSQSR_FILE_ID != null) {
            stmt.bindLong(37, KSQSR_FILE_ID);
        }
 
        String QMID = entity.getQMID();
        if (QMID != null) {
            stmt.bindString(38, QMID);
        }
 
        String ESC_RECORD = entity.getESC_RECORD();
        if (ESC_RECORD != null) {
            stmt.bindString(39, ESC_RECORD);
        }
 
        String ESC_RECORDS = entity.getESC_RECORDS();
        if (ESC_RECORDS != null) {
            stmt.bindString(40, ESC_RECORDS);
        }
 
        Long KSQSR_ID = entity.getKSQSR_ID();
        if (KSQSR_ID != null) {
            stmt.bindLong(41, KSQSR_ID);
        }
 
        Long BXDW_ID = entity.getBXDW_ID();
        if (BXDW_ID != null) {
            stmt.bindLong(42, BXDW_ID);
        }
 
        String BXDW_NAME = entity.getBXDW_NAME();
        if (BXDW_NAME != null) {
            stmt.bindString(43, BXDW_NAME);
        }
 
        Long LXR_ID = entity.getLXR_ID();
        if (LXR_ID != null) {
            stmt.bindLong(44, LXR_ID);
        }
 
        String LXRMC = entity.getLXRMC();
        if (LXRMC != null) {
            stmt.bindString(45, LXRMC);
        }
 
        String LXFS = entity.getLXFS();
        if (LXFS != null) {
            stmt.bindString(46, LXFS);
        }
 
        Integer NEW_FLAG = entity.getNEW_FLAG();
        if (NEW_FLAG != null) {
            stmt.bindLong(47, NEW_FLAG);
        }
 
        String CHECK_ITEMS = entity.getCHECK_ITEMS();
        if (CHECK_ITEMS != null) {
            stmt.bindString(48, CHECK_ITEMS);
        }
 
        String AZGCS = entity.getAZGCS();
        if (AZGCS != null) {
            stmt.bindString(49, AZGCS);
        }
 
        Integer BXQ = entity.getBXQ();
        if (BXQ != null) {
            stmt.bindLong(50, BXQ);
        }
 
        String GCJK = entity.getGCJK();
        if (GCJK != null) {
            stmt.bindString(51, GCJK);
        }
 
        String BRAND = entity.getBRAND();
        if (BRAND != null) {
            stmt.bindString(52, BRAND);
        }
 
        String BZ = entity.getBZ();
        if (BZ != null) {
            stmt.bindString(53, BZ);
        }
 
        String CD_AZR = entity.getCD_AZR();
        if (CD_AZR != null) {
            stmt.bindString(54, CD_AZR);
        }
 
        String CD_AZRDH = entity.getCD_AZRDH();
        if (CD_AZRDH != null) {
            stmt.bindString(55, CD_AZRDH);
        }
 
        String CD_REMARK = entity.getCD_REMARK();
        if (CD_REMARK != null) {
            stmt.bindString(56, CD_REMARK);
        }
 
        String BIG_FRONT_PIC = entity.getBIG_FRONT_PIC();
        if (BIG_FRONT_PIC != null) {
            stmt.bindString(57, BIG_FRONT_PIC);
        }
 
        String BIG_SIDE_PIC = entity.getBIG_SIDE_PIC();
        if (BIG_SIDE_PIC != null) {
            stmt.bindString(58, BIG_SIDE_PIC);
        }
 
        String BIG_MPZ_PIC = entity.getBIG_MPZ_PIC();
        if (BIG_MPZ_PIC != null) {
            stmt.bindString(59, BIG_MPZ_PIC);
        }
 
        Integer MPZ_FILE_ID = entity.getMPZ_FILE_ID();
        if (MPZ_FILE_ID != null) {
            stmt.bindLong(60, MPZ_FILE_ID);
        }
 
        String MPZ_URL = entity.getMPZ_URL();
        if (MPZ_URL != null) {
            stmt.bindString(61, MPZ_URL);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PUR_CONTRACT_PLAN_DETAIL entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        Long HTMX_ID = entity.getHTMX_ID();
        if (HTMX_ID != null) {
            stmt.bindLong(2, HTMX_ID);
        }
 
        Integer CONTRACT_ID = entity.getCONTRACT_ID();
        if (CONTRACT_ID != null) {
            stmt.bindLong(3, CONTRACT_ID);
        }
 
        String CONTRACT_NUM = entity.getCONTRACT_NUM();
        if (CONTRACT_NUM != null) {
            stmt.bindString(4, CONTRACT_NUM);
        }
 
        Integer PLAN_ID = entity.getPLAN_ID();
        if (PLAN_ID != null) {
            stmt.bindLong(5, PLAN_ID);
        }
 
        Integer DEPT_ID = entity.getDEPT_ID();
        if (DEPT_ID != null) {
            stmt.bindLong(6, DEPT_ID);
        }
 
        String DEPT_NAME = entity.getDEPT_NAME();
        if (DEPT_NAME != null) {
            stmt.bindString(7, DEPT_NAME);
        }
 
        String WZMC = entity.getWZMC();
        if (WZMC != null) {
            stmt.bindString(8, WZMC);
        }
 
        Integer YSSL = entity.getYSSL();
        if (YSSL != null) {
            stmt.bindLong(9, YSSL);
        }
 
        Integer MCGGID = entity.getMCGGID();
        if (MCGGID != null) {
            stmt.bindLong(10, MCGGID);
        }
 
        String GYSMC = entity.getGYSMC();
        if (GYSMC != null) {
            stmt.bindString(11, GYSMC);
        }
 
        String GGXH = entity.getGGXH();
        if (GGXH != null) {
            stmt.bindString(12, GGXH);
        }
 
        Integer CHECK_SL = entity.getCHECK_SL();
        if (CHECK_SL != null) {
            stmt.bindLong(13, CHECK_SL);
        }
 
        Integer CHECK_STATUS = entity.getCHECK_STATUS();
        if (CHECK_STATUS != null) {
            stmt.bindLong(14, CHECK_STATUS);
        }
 
        String DH_ID = entity.getDH_ID();
        if (DH_ID != null) {
            stmt.bindString(15, DH_ID);
        }
 
        Boolean CHECK_ISCHECKED = entity.getCHECK_ISCHECKED();
        if (CHECK_ISCHECKED != null) {
            stmt.bindLong(16, CHECK_ISCHECKED ? 1L: 0L);
        }
 
        Integer ALQJ = entity.getALQJ();
        if (ALQJ != null) {
            stmt.bindLong(17, ALQJ);
        }
 
        Integer JLZM = entity.getJLZM();
        if (JLZM != null) {
            stmt.bindLong(18, JLZM);
        }
 
        Integer WGJC = entity.getWGJC();
        if (WGJC != null) {
            stmt.bindLong(19, WGJC);
        }
 
        Integer HWQD = entity.getHWQD();
        if (HWQD != null) {
            stmt.bindLong(20, HWQD);
        }
 
        Integer YQGZQK = entity.getYQGZQK();
        if (YQGZQK != null) {
            stmt.bindLong(21, YQGZQK);
        }
 
        Integer DQAQJC = entity.getDQAQJC();
        if (DQAQJC != null) {
            stmt.bindLong(22, DQAQJC);
        }
 
        String CCBH = entity.getCCBH();
        if (CCBH != null) {
            stmt.bindString(23, CCBH);
        }
 
        java.util.Date YSSJ = entity.getYSSJ();
        if (YSSJ != null) {
            stmt.bindLong(24, YSSJ.getTime());
        }
 
        Integer PUR_YSR_ID = entity.getPUR_YSR_ID();
        if (PUR_YSR_ID != null) {
            stmt.bindLong(25, PUR_YSR_ID);
        }
 
        Integer JQZP_FILE_ID = entity.getJQZP_FILE_ID();
        if (JQZP_FILE_ID != null) {
            stmt.bindLong(26, JQZP_FILE_ID);
        }
 
        Integer JDSQ_FILE_ID = entity.getJDSQ_FILE_ID();
        if (JDSQ_FILE_ID != null) {
            stmt.bindLong(27, JDSQ_FILE_ID);
        }
 
        String ZMZP_URL = entity.getZMZP_URL();
        if (ZMZP_URL != null) {
            stmt.bindString(28, ZMZP_URL);
        }
 
        String CMZP_URL = entity.getCMZP_URL();
        if (CMZP_URL != null) {
            stmt.bindString(29, CMZP_URL);
        }
 
        Integer IS_UP = entity.getIS_UP();
        if (IS_UP != null) {
            stmt.bindLong(30, IS_UP);
        }
 
        Float JYSYNX = entity.getJYSYNX();
        if (JYSYNX != null) {
            stmt.bindDouble(31, JYSYNX);
        }
 
        String ZCZH = entity.getZCZH();
        if (ZCZH != null) {
            stmt.bindString(32, ZCZH);
        }
 
        java.util.Date QSDQSJ = entity.getQSDQSJ();
        if (QSDQSJ != null) {
            stmt.bindLong(33, QSDQSJ.getTime());
        }
 
        String YSR_IDS = entity.getYSR_IDS();
        if (YSR_IDS != null) {
            stmt.bindString(34, YSR_IDS);
        }
 
        String PARTS = entity.getPARTS();
        if (PARTS != null) {
            stmt.bindString(35, PARTS);
        }
 
        String KSQSR_FILE_URL = entity.getKSQSR_FILE_URL();
        if (KSQSR_FILE_URL != null) {
            stmt.bindString(36, KSQSR_FILE_URL);
        }
 
        Integer KSQSR_FILE_ID = entity.getKSQSR_FILE_ID();
        if (KSQSR_FILE_ID != null) {
            stmt.bindLong(37, KSQSR_FILE_ID);
        }
 
        String QMID = entity.getQMID();
        if (QMID != null) {
            stmt.bindString(38, QMID);
        }
 
        String ESC_RECORD = entity.getESC_RECORD();
        if (ESC_RECORD != null) {
            stmt.bindString(39, ESC_RECORD);
        }
 
        String ESC_RECORDS = entity.getESC_RECORDS();
        if (ESC_RECORDS != null) {
            stmt.bindString(40, ESC_RECORDS);
        }
 
        Long KSQSR_ID = entity.getKSQSR_ID();
        if (KSQSR_ID != null) {
            stmt.bindLong(41, KSQSR_ID);
        }
 
        Long BXDW_ID = entity.getBXDW_ID();
        if (BXDW_ID != null) {
            stmt.bindLong(42, BXDW_ID);
        }
 
        String BXDW_NAME = entity.getBXDW_NAME();
        if (BXDW_NAME != null) {
            stmt.bindString(43, BXDW_NAME);
        }
 
        Long LXR_ID = entity.getLXR_ID();
        if (LXR_ID != null) {
            stmt.bindLong(44, LXR_ID);
        }
 
        String LXRMC = entity.getLXRMC();
        if (LXRMC != null) {
            stmt.bindString(45, LXRMC);
        }
 
        String LXFS = entity.getLXFS();
        if (LXFS != null) {
            stmt.bindString(46, LXFS);
        }
 
        Integer NEW_FLAG = entity.getNEW_FLAG();
        if (NEW_FLAG != null) {
            stmt.bindLong(47, NEW_FLAG);
        }
 
        String CHECK_ITEMS = entity.getCHECK_ITEMS();
        if (CHECK_ITEMS != null) {
            stmt.bindString(48, CHECK_ITEMS);
        }
 
        String AZGCS = entity.getAZGCS();
        if (AZGCS != null) {
            stmt.bindString(49, AZGCS);
        }
 
        Integer BXQ = entity.getBXQ();
        if (BXQ != null) {
            stmt.bindLong(50, BXQ);
        }
 
        String GCJK = entity.getGCJK();
        if (GCJK != null) {
            stmt.bindString(51, GCJK);
        }
 
        String BRAND = entity.getBRAND();
        if (BRAND != null) {
            stmt.bindString(52, BRAND);
        }
 
        String BZ = entity.getBZ();
        if (BZ != null) {
            stmt.bindString(53, BZ);
        }
 
        String CD_AZR = entity.getCD_AZR();
        if (CD_AZR != null) {
            stmt.bindString(54, CD_AZR);
        }
 
        String CD_AZRDH = entity.getCD_AZRDH();
        if (CD_AZRDH != null) {
            stmt.bindString(55, CD_AZRDH);
        }
 
        String CD_REMARK = entity.getCD_REMARK();
        if (CD_REMARK != null) {
            stmt.bindString(56, CD_REMARK);
        }
 
        String BIG_FRONT_PIC = entity.getBIG_FRONT_PIC();
        if (BIG_FRONT_PIC != null) {
            stmt.bindString(57, BIG_FRONT_PIC);
        }
 
        String BIG_SIDE_PIC = entity.getBIG_SIDE_PIC();
        if (BIG_SIDE_PIC != null) {
            stmt.bindString(58, BIG_SIDE_PIC);
        }
 
        String BIG_MPZ_PIC = entity.getBIG_MPZ_PIC();
        if (BIG_MPZ_PIC != null) {
            stmt.bindString(59, BIG_MPZ_PIC);
        }
 
        Integer MPZ_FILE_ID = entity.getMPZ_FILE_ID();
        if (MPZ_FILE_ID != null) {
            stmt.bindLong(60, MPZ_FILE_ID);
        }
 
        String MPZ_URL = entity.getMPZ_URL();
        if (MPZ_URL != null) {
            stmt.bindString(61, MPZ_URL);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PUR_CONTRACT_PLAN_DETAIL readEntity(Cursor cursor, int offset) {
        PUR_CONTRACT_PLAN_DETAIL entity = new PUR_CONTRACT_PLAN_DETAIL( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // HTMX_ID
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // CONTRACT_ID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CONTRACT_NUM
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // PLAN_ID
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // DEPT_ID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // DEPT_NAME
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // WZMC
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // YSSL
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // MCGGID
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // GYSMC
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // GGXH
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // CHECK_SL
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // CHECK_STATUS
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // DH_ID
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // CHECK_ISCHECKED
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // ALQJ
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // JLZM
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // WGJC
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // HWQD
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // YQGZQK
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // DQAQJC
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // CCBH
            cursor.isNull(offset + 23) ? null : new java.util.Date(cursor.getLong(offset + 23)), // YSSJ
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // PUR_YSR_ID
            cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // JQZP_FILE_ID
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // JDSQ_FILE_ID
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // ZMZP_URL
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // CMZP_URL
            cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29), // IS_UP
            cursor.isNull(offset + 30) ? null : cursor.getFloat(offset + 30), // JYSYNX
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // ZCZH
            cursor.isNull(offset + 32) ? null : new java.util.Date(cursor.getLong(offset + 32)), // QSDQSJ
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // YSR_IDS
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // PARTS
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // KSQSR_FILE_URL
            cursor.isNull(offset + 36) ? null : cursor.getInt(offset + 36), // KSQSR_FILE_ID
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // QMID
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // ESC_RECORD
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // ESC_RECORDS
            cursor.isNull(offset + 40) ? null : cursor.getLong(offset + 40), // KSQSR_ID
            cursor.isNull(offset + 41) ? null : cursor.getLong(offset + 41), // BXDW_ID
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // BXDW_NAME
            cursor.isNull(offset + 43) ? null : cursor.getLong(offset + 43), // LXR_ID
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // LXRMC
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // LXFS
            cursor.isNull(offset + 46) ? null : cursor.getInt(offset + 46), // NEW_FLAG
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // CHECK_ITEMS
            cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48), // AZGCS
            cursor.isNull(offset + 49) ? null : cursor.getInt(offset + 49), // BXQ
            cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50), // GCJK
            cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51), // BRAND
            cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52), // BZ
            cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53), // CD_AZR
            cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54), // CD_AZRDH
            cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55), // CD_REMARK
            cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56), // BIG_FRONT_PIC
            cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57), // BIG_SIDE_PIC
            cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58), // BIG_MPZ_PIC
            cursor.isNull(offset + 59) ? null : cursor.getInt(offset + 59), // MPZ_FILE_ID
            cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60) // MPZ_URL
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PUR_CONTRACT_PLAN_DETAIL entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHTMX_ID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCONTRACT_ID(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setCONTRACT_NUM(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPLAN_ID(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setDEPT_ID(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDEPT_NAME(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWZMC(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setYSSL(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setMCGGID(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setGYSMC(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setGGXH(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCHECK_SL(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setCHECK_STATUS(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setDH_ID(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCHECK_ISCHECKED(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
        entity.setALQJ(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setJLZM(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setWGJC(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setHWQD(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setYQGZQK(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setDQAQJC(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setCCBH(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setYSSJ(cursor.isNull(offset + 23) ? null : new java.util.Date(cursor.getLong(offset + 23)));
        entity.setPUR_YSR_ID(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setJQZP_FILE_ID(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setJDSQ_FILE_ID(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setZMZP_URL(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setCMZP_URL(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setIS_UP(cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29));
        entity.setJYSYNX(cursor.isNull(offset + 30) ? null : cursor.getFloat(offset + 30));
        entity.setZCZH(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setQSDQSJ(cursor.isNull(offset + 32) ? null : new java.util.Date(cursor.getLong(offset + 32)));
        entity.setYSR_IDS(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setPARTS(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setKSQSR_FILE_URL(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setKSQSR_FILE_ID(cursor.isNull(offset + 36) ? null : cursor.getInt(offset + 36));
        entity.setQMID(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setESC_RECORD(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setESC_RECORDS(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setKSQSR_ID(cursor.isNull(offset + 40) ? null : cursor.getLong(offset + 40));
        entity.setBXDW_ID(cursor.isNull(offset + 41) ? null : cursor.getLong(offset + 41));
        entity.setBXDW_NAME(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setLXR_ID(cursor.isNull(offset + 43) ? null : cursor.getLong(offset + 43));
        entity.setLXRMC(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setLXFS(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setNEW_FLAG(cursor.isNull(offset + 46) ? null : cursor.getInt(offset + 46));
        entity.setCHECK_ITEMS(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setAZGCS(cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48));
        entity.setBXQ(cursor.isNull(offset + 49) ? null : cursor.getInt(offset + 49));
        entity.setGCJK(cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50));
        entity.setBRAND(cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51));
        entity.setBZ(cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52));
        entity.setCD_AZR(cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53));
        entity.setCD_AZRDH(cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54));
        entity.setCD_REMARK(cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55));
        entity.setBIG_FRONT_PIC(cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56));
        entity.setBIG_SIDE_PIC(cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57));
        entity.setBIG_MPZ_PIC(cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58));
        entity.setMPZ_FILE_ID(cursor.isNull(offset + 59) ? null : cursor.getInt(offset + 59));
        entity.setMPZ_URL(cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PUR_CONTRACT_PLAN_DETAIL entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PUR_CONTRACT_PLAN_DETAIL entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PUR_CONTRACT_PLAN_DETAIL entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
