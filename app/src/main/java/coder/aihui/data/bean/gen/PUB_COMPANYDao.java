package coder.aihui.data.bean.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import coder.aihui.data.bean.PUB_COMPANY;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PUB__COMPANY".
*/
public class PUB_COMPANYDao extends AbstractDao<PUB_COMPANY, Long> {

    public static final String TABLENAME = "PUB__COMPANY";

    /**
     * Properties of entity PUB_COMPANY.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DM = new Property(0, Long.class, "DM", false, "DM");
        public final static Property IS_BXDW = new Property(1, Integer.class, "IS_BXDW", false, "IS__BXDW");
        public final static Property KFID = new Property(2, Long.class, "KFID", false, "KFID");
        public final static Property LX = new Property(3, Integer.class, "LX", false, "LX");
        public final static Property ID = new Property(4, Long.class, "ID", true, "_id");
        public final static Property MC = new Property(5, String.class, "MC", false, "MC");
        public final static Property NEW_FLAG = new Property(6, Integer.class, "NEW_FLAG", false, "NEW__FLAG");
    }


    public PUB_COMPANYDao(DaoConfig config) {
        super(config);
    }
    
    public PUB_COMPANYDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PUB__COMPANY\" (" + //
                "\"DM\" INTEGER," + // 0: DM
                "\"IS__BXDW\" INTEGER," + // 1: IS_BXDW
                "\"KFID\" INTEGER," + // 2: KFID
                "\"LX\" INTEGER," + // 3: LX
                "\"_id\" INTEGER PRIMARY KEY ," + // 4: ID
                "\"MC\" TEXT," + // 5: MC
                "\"NEW__FLAG\" INTEGER);"); // 6: NEW_FLAG
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PUB__COMPANY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PUB_COMPANY entity) {
        stmt.clearBindings();
 
        Long DM = entity.getDM();
        if (DM != null) {
            stmt.bindLong(1, DM);
        }
 
        Integer IS_BXDW = entity.getIS_BXDW();
        if (IS_BXDW != null) {
            stmt.bindLong(2, IS_BXDW);
        }
 
        Long KFID = entity.getKFID();
        if (KFID != null) {
            stmt.bindLong(3, KFID);
        }
 
        Integer LX = entity.getLX();
        if (LX != null) {
            stmt.bindLong(4, LX);
        }
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(5, ID);
        }
 
        String MC = entity.getMC();
        if (MC != null) {
            stmt.bindString(6, MC);
        }
 
        Integer NEW_FLAG = entity.getNEW_FLAG();
        if (NEW_FLAG != null) {
            stmt.bindLong(7, NEW_FLAG);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PUB_COMPANY entity) {
        stmt.clearBindings();
 
        Long DM = entity.getDM();
        if (DM != null) {
            stmt.bindLong(1, DM);
        }
 
        Integer IS_BXDW = entity.getIS_BXDW();
        if (IS_BXDW != null) {
            stmt.bindLong(2, IS_BXDW);
        }
 
        Long KFID = entity.getKFID();
        if (KFID != null) {
            stmt.bindLong(3, KFID);
        }
 
        Integer LX = entity.getLX();
        if (LX != null) {
            stmt.bindLong(4, LX);
        }
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(5, ID);
        }
 
        String MC = entity.getMC();
        if (MC != null) {
            stmt.bindString(6, MC);
        }
 
        Integer NEW_FLAG = entity.getNEW_FLAG();
        if (NEW_FLAG != null) {
            stmt.bindLong(7, NEW_FLAG);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4);
    }    

    @Override
    public PUB_COMPANY readEntity(Cursor cursor, int offset) {
        PUB_COMPANY entity = new PUB_COMPANY( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // DM
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // IS_BXDW
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // KFID
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // LX
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // ID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // MC
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // NEW_FLAG
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PUB_COMPANY entity, int offset) {
        entity.setDM(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIS_BXDW(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setKFID(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setLX(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setID(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setMC(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNEW_FLAG(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PUB_COMPANY entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PUB_COMPANY entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PUB_COMPANY entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
