package coder.aihui.data.bean.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import coder.aihui.data.bean.IN_MATERIALS_PPMC;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IN__MATERIALS__PPMC".
*/
public class IN_MATERIALS_PPMCDao extends AbstractDao<IN_MATERIALS_PPMC, Long> {

    public static final String TABLENAME = "IN__MATERIALS__PPMC";

    /**
     * Properties of entity IN_MATERIALS_PPMC.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property DM = new Property(1, String.class, "DM", false, "DM");
        public final static Property MC = new Property(2, String.class, "MC", false, "MC");
        public final static Property LB = new Property(3, String.class, "LB", false, "LB");
    }


    public IN_MATERIALS_PPMCDao(DaoConfig config) {
        super(config);
    }
    
    public IN_MATERIALS_PPMCDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IN__MATERIALS__PPMC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: ID
                "\"DM\" TEXT," + // 1: DM
                "\"MC\" TEXT," + // 2: MC
                "\"LB\" TEXT);"); // 3: LB
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IN__MATERIALS__PPMC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IN_MATERIALS_PPMC entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String DM = entity.getDM();
        if (DM != null) {
            stmt.bindString(2, DM);
        }
 
        String MC = entity.getMC();
        if (MC != null) {
            stmt.bindString(3, MC);
        }
 
        String LB = entity.getLB();
        if (LB != null) {
            stmt.bindString(4, LB);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IN_MATERIALS_PPMC entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String DM = entity.getDM();
        if (DM != null) {
            stmt.bindString(2, DM);
        }
 
        String MC = entity.getMC();
        if (MC != null) {
            stmt.bindString(3, MC);
        }
 
        String LB = entity.getLB();
        if (LB != null) {
            stmt.bindString(4, LB);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public IN_MATERIALS_PPMC readEntity(Cursor cursor, int offset) {
        IN_MATERIALS_PPMC entity = new IN_MATERIALS_PPMC( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // DM
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // MC
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // LB
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IN_MATERIALS_PPMC entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDM(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMC(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLB(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IN_MATERIALS_PPMC entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IN_MATERIALS_PPMC entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IN_MATERIALS_PPMC entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
