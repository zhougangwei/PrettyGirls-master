package coder.aihui.data.bean.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import coder.aihui.data.bean.PUR_CONTRACT_PLAN;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PUR__CONTRACT__PLAN".
*/
public class PUR_CONTRACT_PLANDao extends AbstractDao<PUR_CONTRACT_PLAN, Long> {

    public static final String TABLENAME = "PUR__CONTRACT__PLAN";

    /**
     * Properties of entity PUR_CONTRACT_PLAN.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property HTMX_ID = new Property(0, Long.class, "HTMX_ID", true, "HTMX__ID");
        public final static Property CONTRACT_ID = new Property(1, Integer.class, "CONTRACT_ID", false, "CONTRACT__ID");
        public final static Property CONTRACT_NUM = new Property(2, String.class, "CONTRACT_NUM", false, "CONTRACT__NUM");
        public final static Property PLAN_ID = new Property(3, Integer.class, "PLAN_ID", false, "PLAN__ID");
        public final static Property DEPT_ID = new Property(4, Integer.class, "DEPT_ID", false, "DEPT__ID");
        public final static Property DEPT_NAME = new Property(5, String.class, "DEPT_NAME", false, "DEPT__NAME");
        public final static Property WZMC = new Property(6, String.class, "WZMC", false, "WZMC");
        public final static Property YSSL = new Property(7, Integer.class, "YSSL", false, "YSSL");
        public final static Property MCGGID = new Property(8, Integer.class, "MCGGID", false, "MCGGID");
        public final static Property GYSMC = new Property(9, String.class, "GYSMC", false, "GYSMC");
        public final static Property GGXH = new Property(10, String.class, "GGXH", false, "GGXH");
        public final static Property CREATE_TIME = new Property(11, java.util.Date.class, "CREATE_TIME", false, "CREATE__TIME");
        public final static Property CHECK_TIME = new Property(12, java.util.Date.class, "CHECK_TIME", false, "CHECK__TIME");
        public final static Property CHECK_LISTNUM = new Property(13, String.class, "CHECK_LISTNUM", false, "CHECK__LISTNUM");
        public final static Property CHECK_SL = new Property(14, Integer.class, "CHECK_SL", false, "CHECK__SL");
        public final static Property CHECK_STATUS = new Property(15, Integer.class, "CHECK_STATUS", false, "CHECK__STATUS");
        public final static Property DH_ID = new Property(16, String.class, "DH_ID", false, "DH__ID");
        public final static Property YSR_IDS = new Property(17, String.class, "YSR_IDS", false, "YSR__IDS");
        public final static Property AZGCS = new Property(18, String.class, "AZGCS", false, "AZGCS");
        public final static Property BXQ = new Property(19, Integer.class, "BXQ", false, "BXQ");
        public final static Property GCJK = new Property(20, String.class, "GCJK", false, "GCJK");
        public final static Property BRAND = new Property(21, String.class, "BRAND", false, "BRAND");
        public final static Property PARTS_STRING = new Property(22, String.class, "PARTS_STRING", false, "PARTS");
        public final static Property ZCZH = new Property(23, String.class, "ZCZH", false, "ZCZH");
        public final static Property QSDQSJ = new Property(24, String.class, "QSDQSJ", false, "QSDQSJ");
    }


    public PUR_CONTRACT_PLANDao(DaoConfig config) {
        super(config);
    }
    
    public PUR_CONTRACT_PLANDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PUR__CONTRACT__PLAN\" (" + //
                "\"HTMX__ID\" INTEGER PRIMARY KEY ," + // 0: HTMX_ID
                "\"CONTRACT__ID\" INTEGER," + // 1: CONTRACT_ID
                "\"CONTRACT__NUM\" TEXT," + // 2: CONTRACT_NUM
                "\"PLAN__ID\" INTEGER," + // 3: PLAN_ID
                "\"DEPT__ID\" INTEGER," + // 4: DEPT_ID
                "\"DEPT__NAME\" TEXT," + // 5: DEPT_NAME
                "\"WZMC\" TEXT," + // 6: WZMC
                "\"YSSL\" INTEGER," + // 7: YSSL
                "\"MCGGID\" INTEGER," + // 8: MCGGID
                "\"GYSMC\" TEXT," + // 9: GYSMC
                "\"GGXH\" TEXT," + // 10: GGXH
                "\"CREATE__TIME\" INTEGER," + // 11: CREATE_TIME
                "\"CHECK__TIME\" INTEGER," + // 12: CHECK_TIME
                "\"CHECK__LISTNUM\" TEXT," + // 13: CHECK_LISTNUM
                "\"CHECK__SL\" INTEGER," + // 14: CHECK_SL
                "\"CHECK__STATUS\" INTEGER," + // 15: CHECK_STATUS
                "\"DH__ID\" TEXT," + // 16: DH_ID
                "\"YSR__IDS\" TEXT," + // 17: YSR_IDS
                "\"AZGCS\" TEXT," + // 18: AZGCS
                "\"BXQ\" INTEGER," + // 19: BXQ
                "\"GCJK\" TEXT," + // 20: GCJK
                "\"BRAND\" TEXT," + // 21: BRAND
                "\"PARTS\" TEXT," + // 22: PARTS_STRING
                "\"ZCZH\" TEXT," + // 23: ZCZH
                "\"QSDQSJ\" TEXT);"); // 24: QSDQSJ
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PUR__CONTRACT__PLAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PUR_CONTRACT_PLAN entity) {
        stmt.clearBindings();
 
        Long HTMX_ID = entity.getHTMX_ID();
        if (HTMX_ID != null) {
            stmt.bindLong(1, HTMX_ID);
        }
 
        Integer CONTRACT_ID = entity.getCONTRACT_ID();
        if (CONTRACT_ID != null) {
            stmt.bindLong(2, CONTRACT_ID);
        }
 
        String CONTRACT_NUM = entity.getCONTRACT_NUM();
        if (CONTRACT_NUM != null) {
            stmt.bindString(3, CONTRACT_NUM);
        }
 
        Integer PLAN_ID = entity.getPLAN_ID();
        if (PLAN_ID != null) {
            stmt.bindLong(4, PLAN_ID);
        }
 
        Integer DEPT_ID = entity.getDEPT_ID();
        if (DEPT_ID != null) {
            stmt.bindLong(5, DEPT_ID);
        }
 
        String DEPT_NAME = entity.getDEPT_NAME();
        if (DEPT_NAME != null) {
            stmt.bindString(6, DEPT_NAME);
        }
 
        String WZMC = entity.getWZMC();
        if (WZMC != null) {
            stmt.bindString(7, WZMC);
        }
 
        Integer YSSL = entity.getYSSL();
        if (YSSL != null) {
            stmt.bindLong(8, YSSL);
        }
 
        Integer MCGGID = entity.getMCGGID();
        if (MCGGID != null) {
            stmt.bindLong(9, MCGGID);
        }
 
        String GYSMC = entity.getGYSMC();
        if (GYSMC != null) {
            stmt.bindString(10, GYSMC);
        }
 
        String GGXH = entity.getGGXH();
        if (GGXH != null) {
            stmt.bindString(11, GGXH);
        }
 
        java.util.Date CREATE_TIME = entity.getCREATE_TIME();
        if (CREATE_TIME != null) {
            stmt.bindLong(12, CREATE_TIME.getTime());
        }
 
        java.util.Date CHECK_TIME = entity.getCHECK_TIME();
        if (CHECK_TIME != null) {
            stmt.bindLong(13, CHECK_TIME.getTime());
        }
 
        String CHECK_LISTNUM = entity.getCHECK_LISTNUM();
        if (CHECK_LISTNUM != null) {
            stmt.bindString(14, CHECK_LISTNUM);
        }
 
        Integer CHECK_SL = entity.getCHECK_SL();
        if (CHECK_SL != null) {
            stmt.bindLong(15, CHECK_SL);
        }
 
        Integer CHECK_STATUS = entity.getCHECK_STATUS();
        if (CHECK_STATUS != null) {
            stmt.bindLong(16, CHECK_STATUS);
        }
 
        String DH_ID = entity.getDH_ID();
        if (DH_ID != null) {
            stmt.bindString(17, DH_ID);
        }
 
        String YSR_IDS = entity.getYSR_IDS();
        if (YSR_IDS != null) {
            stmt.bindString(18, YSR_IDS);
        }
 
        String AZGCS = entity.getAZGCS();
        if (AZGCS != null) {
            stmt.bindString(19, AZGCS);
        }
 
        Integer BXQ = entity.getBXQ();
        if (BXQ != null) {
            stmt.bindLong(20, BXQ);
        }
 
        String GCJK = entity.getGCJK();
        if (GCJK != null) {
            stmt.bindString(21, GCJK);
        }
 
        String BRAND = entity.getBRAND();
        if (BRAND != null) {
            stmt.bindString(22, BRAND);
        }
 
        String PARTS_STRING = entity.getPARTS_STRING();
        if (PARTS_STRING != null) {
            stmt.bindString(23, PARTS_STRING);
        }
 
        String ZCZH = entity.getZCZH();
        if (ZCZH != null) {
            stmt.bindString(24, ZCZH);
        }
 
        String QSDQSJ = entity.getQSDQSJ();
        if (QSDQSJ != null) {
            stmt.bindString(25, QSDQSJ);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PUR_CONTRACT_PLAN entity) {
        stmt.clearBindings();
 
        Long HTMX_ID = entity.getHTMX_ID();
        if (HTMX_ID != null) {
            stmt.bindLong(1, HTMX_ID);
        }
 
        Integer CONTRACT_ID = entity.getCONTRACT_ID();
        if (CONTRACT_ID != null) {
            stmt.bindLong(2, CONTRACT_ID);
        }
 
        String CONTRACT_NUM = entity.getCONTRACT_NUM();
        if (CONTRACT_NUM != null) {
            stmt.bindString(3, CONTRACT_NUM);
        }
 
        Integer PLAN_ID = entity.getPLAN_ID();
        if (PLAN_ID != null) {
            stmt.bindLong(4, PLAN_ID);
        }
 
        Integer DEPT_ID = entity.getDEPT_ID();
        if (DEPT_ID != null) {
            stmt.bindLong(5, DEPT_ID);
        }
 
        String DEPT_NAME = entity.getDEPT_NAME();
        if (DEPT_NAME != null) {
            stmt.bindString(6, DEPT_NAME);
        }
 
        String WZMC = entity.getWZMC();
        if (WZMC != null) {
            stmt.bindString(7, WZMC);
        }
 
        Integer YSSL = entity.getYSSL();
        if (YSSL != null) {
            stmt.bindLong(8, YSSL);
        }
 
        Integer MCGGID = entity.getMCGGID();
        if (MCGGID != null) {
            stmt.bindLong(9, MCGGID);
        }
 
        String GYSMC = entity.getGYSMC();
        if (GYSMC != null) {
            stmt.bindString(10, GYSMC);
        }
 
        String GGXH = entity.getGGXH();
        if (GGXH != null) {
            stmt.bindString(11, GGXH);
        }
 
        java.util.Date CREATE_TIME = entity.getCREATE_TIME();
        if (CREATE_TIME != null) {
            stmt.bindLong(12, CREATE_TIME.getTime());
        }
 
        java.util.Date CHECK_TIME = entity.getCHECK_TIME();
        if (CHECK_TIME != null) {
            stmt.bindLong(13, CHECK_TIME.getTime());
        }
 
        String CHECK_LISTNUM = entity.getCHECK_LISTNUM();
        if (CHECK_LISTNUM != null) {
            stmt.bindString(14, CHECK_LISTNUM);
        }
 
        Integer CHECK_SL = entity.getCHECK_SL();
        if (CHECK_SL != null) {
            stmt.bindLong(15, CHECK_SL);
        }
 
        Integer CHECK_STATUS = entity.getCHECK_STATUS();
        if (CHECK_STATUS != null) {
            stmt.bindLong(16, CHECK_STATUS);
        }
 
        String DH_ID = entity.getDH_ID();
        if (DH_ID != null) {
            stmt.bindString(17, DH_ID);
        }
 
        String YSR_IDS = entity.getYSR_IDS();
        if (YSR_IDS != null) {
            stmt.bindString(18, YSR_IDS);
        }
 
        String AZGCS = entity.getAZGCS();
        if (AZGCS != null) {
            stmt.bindString(19, AZGCS);
        }
 
        Integer BXQ = entity.getBXQ();
        if (BXQ != null) {
            stmt.bindLong(20, BXQ);
        }
 
        String GCJK = entity.getGCJK();
        if (GCJK != null) {
            stmt.bindString(21, GCJK);
        }
 
        String BRAND = entity.getBRAND();
        if (BRAND != null) {
            stmt.bindString(22, BRAND);
        }
 
        String PARTS_STRING = entity.getPARTS_STRING();
        if (PARTS_STRING != null) {
            stmt.bindString(23, PARTS_STRING);
        }
 
        String ZCZH = entity.getZCZH();
        if (ZCZH != null) {
            stmt.bindString(24, ZCZH);
        }
 
        String QSDQSJ = entity.getQSDQSJ();
        if (QSDQSJ != null) {
            stmt.bindString(25, QSDQSJ);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PUR_CONTRACT_PLAN readEntity(Cursor cursor, int offset) {
        PUR_CONTRACT_PLAN entity = new PUR_CONTRACT_PLAN( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // HTMX_ID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // CONTRACT_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CONTRACT_NUM
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // PLAN_ID
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // DEPT_ID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // DEPT_NAME
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // WZMC
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // YSSL
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // MCGGID
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // GYSMC
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // GGXH
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // CREATE_TIME
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // CHECK_TIME
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // CHECK_LISTNUM
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // CHECK_SL
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // CHECK_STATUS
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // DH_ID
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // YSR_IDS
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // AZGCS
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // BXQ
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // GCJK
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // BRAND
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // PARTS_STRING
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // ZCZH
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24) // QSDQSJ
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PUR_CONTRACT_PLAN entity, int offset) {
        entity.setHTMX_ID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCONTRACT_ID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setCONTRACT_NUM(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPLAN_ID(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDEPT_ID(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setDEPT_NAME(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWZMC(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setYSSL(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setMCGGID(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setGYSMC(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGGXH(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCREATE_TIME(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setCHECK_TIME(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setCHECK_LISTNUM(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCHECK_SL(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setCHECK_STATUS(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setDH_ID(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setYSR_IDS(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setAZGCS(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setBXQ(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setGCJK(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setBRAND(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setPARTS_STRING(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setZCZH(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setQSDQSJ(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PUR_CONTRACT_PLAN entity, long rowId) {
        entity.setHTMX_ID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PUR_CONTRACT_PLAN entity) {
        if(entity != null) {
            return entity.getHTMX_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PUR_CONTRACT_PLAN entity) {
        return entity.getHTMX_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
