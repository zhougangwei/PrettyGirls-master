package coder.aihui.data.bean.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import coder.aihui.data.bean.INSPECT_PLAN;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INSPECT__PLAN".
*/
public class INSPECT_PLANDao extends AbstractDao<INSPECT_PLAN, Long> {

    public static final String TABLENAME = "INSPECT__PLAN";

    /**
     * Properties of entity INSPECT_PLAN.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property INSP_ID = new Property(1, Long.class, "INSP_ID", false, "INSP__ID");
        public final static Property INSP_EXEC_TYPE = new Property(2, String.class, "INSP_EXEC_TYPE", false, "INSP__EXEC__TYPE");
        public final static Property INSP_FK_ID = new Property(3, String.class, "INSP_FK_ID", false, "INSP__FK__ID");
        public final static Property INSP_TYPE = new Property(4, String.class, "INSP_TYPE", false, "INSP__TYPE");
        public final static Property INSP_EXEC_DATE = new Property(5, java.util.Date.class, "INSP_EXEC_DATE", false, "INSP__EXEC__DATE");
        public final static Property INSP_PRIOR_EXEC_DATE = new Property(6, java.util.Date.class, "INSP_PRIOR_EXEC_DATE", false, "INSP__PRIOR__EXEC__DATE");
        public final static Property INSP_STATE = new Property(7, String.class, "INSP_STATE", false, "INSP__STATE");
        public final static Property INSP_IS_DEL = new Property(8, Integer.class, "INSP_IS_DEL", false, "INSP__IS__DEL");
        public final static Property INSP_REMARK = new Property(9, String.class, "INSP_REMARK", false, "INSP__REMARK");
        public final static Property INSP_CREATE_DATE = new Property(10, java.util.Date.class, "INSP_CREATE_DATE", false, "INSP__CREATE__DATE");
        public final static Property INSP_CREATE_USER = new Property(11, Integer.class, "INSP_CREATE_USER", false, "INSP__CREATE__USER");
        public final static Property INSP_UPDATE_DATE = new Property(12, java.util.Date.class, "INSP_UPDATE_DATE", false, "INSP__UPDATE__DATE");
        public final static Property INSP_UPDATE_USER = new Property(13, Integer.class, "INSP_UPDATE_USER", false, "INSP__UPDATE__USER");
        public final static Property INST_FK_ID = new Property(14, Integer.class, "INST_FK_ID", false, "INST__FK__ID");
        public final static Property KPBH = new Property(15, String.class, "KPBH", false, "KPBH");
        public final static Property DDID = new Property(16, Long.class, "DDID", false, "DDID");
        public final static Property DDMC = new Property(17, String.class, "DDMC", false, "DDMC");
        public final static Property WZMC = new Property(18, String.class, "WZMC", false, "WZMC");
        public final static Property ZQLX = new Property(19, String.class, "ZQLX", false, "ZQLX");
        public final static Property XJFL = new Property(20, Long.class, "XJFL", false, "XJFL");
        public final static Property XJFL_MC = new Property(21, String.class, "XJFL_MC", false, "XJFL__MC");
        public final static Property INSE_CYCLE = new Property(22, String.class, "INSE_CYCLE", false, "INSE__CYCLE");
        public final static Property RFID_CODE = new Property(23, String.class, "RFID_CODE", false, "RFID__CODE");
        public final static Property BAR_CODE = new Property(24, String.class, "BAR_CODE", false, "BAR__CODE");
        public final static Property ISCHECK = new Property(25, Integer.class, "ISCHECK", false, "ISCHECK");
        public final static Property RESULT = new Property(26, Integer.class, "RESULT", false, "RESULT");
        public final static Property DOWN_DATE = new Property(27, java.util.Date.class, "DOWN_DATE", false, "DOWN__DATE");
        public final static Property INSP_EXEC_DATE_END = new Property(28, java.util.Date.class, "INSP_EXEC_DATE_END", false, "INSP__EXEC__DATE__END");
        public final static Property KPBH_OLD = new Property(29, String.class, "KPBH_OLD", false, "KPBH__OLD");
        public final static Property KSID = new Property(30, Long.class, "KSID", false, "KSID");
        public final static Property INSE_CYCLE_FLOAT = new Property(31, Integer.class, "INSE_CYCLE_FLOAT", false, "INSE__CYCLE__FLOAT");
        public final static Property INSP_EXEC_START_DATE = new Property(32, java.util.Date.class, "INSP_EXEC_START_DATE", false, "INSP__EXEC__START__DATE");
        public final static Property INSP_EXEC_END_DATE = new Property(33, java.util.Date.class, "INSP_EXEC_END_DATE", false, "INSP__EXEC__END__DATE");
        public final static Property KSMC = new Property(34, String.class, "KSMC", false, "KSMC");
        public final static Property SCBH = new Property(35, String.class, "SCBH", false, "SCBH");
        public final static Property GGXH = new Property(36, String.class, "GGXH", false, "GGXH");
        public final static Property PPMC = new Property(37, String.class, "PPMC", false, "PPMC");
        public final static Property INSE_TEMPLATE_ID = new Property(38, Long.class, "INSE_TEMPLATE_ID", false, "INSE__TEMPLATE__ID");
        public final static Property CREATE_DATE = new Property(39, java.util.Date.class, "CREATE_DATE", false, "CREATE__DATE");
        public final static Property MODIFY_DATE = new Property(40, java.util.Date.class, "MODIFY_DATE", false, "MODIFY__DATE");
        public final static Property KFID = new Property(41, String.class, "KFID", false, "KFID");
        public final static Property IS_TEMPORARY = new Property(42, Boolean.class, "IS_TEMPORARY", false, "IS__TEMPORARY");
    }


    public INSPECT_PLANDao(DaoConfig config) {
        super(config);
    }
    
    public INSPECT_PLANDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INSPECT__PLAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: ID
                "\"INSP__ID\" INTEGER UNIQUE ," + // 1: INSP_ID
                "\"INSP__EXEC__TYPE\" TEXT," + // 2: INSP_EXEC_TYPE
                "\"INSP__FK__ID\" TEXT," + // 3: INSP_FK_ID
                "\"INSP__TYPE\" TEXT," + // 4: INSP_TYPE
                "\"INSP__EXEC__DATE\" INTEGER," + // 5: INSP_EXEC_DATE
                "\"INSP__PRIOR__EXEC__DATE\" INTEGER," + // 6: INSP_PRIOR_EXEC_DATE
                "\"INSP__STATE\" TEXT," + // 7: INSP_STATE
                "\"INSP__IS__DEL\" INTEGER," + // 8: INSP_IS_DEL
                "\"INSP__REMARK\" TEXT," + // 9: INSP_REMARK
                "\"INSP__CREATE__DATE\" INTEGER," + // 10: INSP_CREATE_DATE
                "\"INSP__CREATE__USER\" INTEGER," + // 11: INSP_CREATE_USER
                "\"INSP__UPDATE__DATE\" INTEGER," + // 12: INSP_UPDATE_DATE
                "\"INSP__UPDATE__USER\" INTEGER," + // 13: INSP_UPDATE_USER
                "\"INST__FK__ID\" INTEGER," + // 14: INST_FK_ID
                "\"KPBH\" TEXT," + // 15: KPBH
                "\"DDID\" INTEGER," + // 16: DDID
                "\"DDMC\" TEXT," + // 17: DDMC
                "\"WZMC\" TEXT," + // 18: WZMC
                "\"ZQLX\" TEXT," + // 19: ZQLX
                "\"XJFL\" INTEGER," + // 20: XJFL
                "\"XJFL__MC\" TEXT," + // 21: XJFL_MC
                "\"INSE__CYCLE\" TEXT," + // 22: INSE_CYCLE
                "\"RFID__CODE\" TEXT," + // 23: RFID_CODE
                "\"BAR__CODE\" TEXT," + // 24: BAR_CODE
                "\"ISCHECK\" INTEGER," + // 25: ISCHECK
                "\"RESULT\" INTEGER," + // 26: RESULT
                "\"DOWN__DATE\" INTEGER," + // 27: DOWN_DATE
                "\"INSP__EXEC__DATE__END\" INTEGER," + // 28: INSP_EXEC_DATE_END
                "\"KPBH__OLD\" TEXT," + // 29: KPBH_OLD
                "\"KSID\" INTEGER," + // 30: KSID
                "\"INSE__CYCLE__FLOAT\" INTEGER," + // 31: INSE_CYCLE_FLOAT
                "\"INSP__EXEC__START__DATE\" INTEGER," + // 32: INSP_EXEC_START_DATE
                "\"INSP__EXEC__END__DATE\" INTEGER," + // 33: INSP_EXEC_END_DATE
                "\"KSMC\" TEXT," + // 34: KSMC
                "\"SCBH\" TEXT," + // 35: SCBH
                "\"GGXH\" TEXT," + // 36: GGXH
                "\"PPMC\" TEXT," + // 37: PPMC
                "\"INSE__TEMPLATE__ID\" INTEGER," + // 38: INSE_TEMPLATE_ID
                "\"CREATE__DATE\" INTEGER," + // 39: CREATE_DATE
                "\"MODIFY__DATE\" INTEGER," + // 40: MODIFY_DATE
                "\"KFID\" TEXT," + // 41: KFID
                "\"IS__TEMPORARY\" INTEGER);"); // 42: IS_TEMPORARY
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INSPECT__PLAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, INSPECT_PLAN entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        Long INSP_ID = entity.getINSP_ID();
        if (INSP_ID != null) {
            stmt.bindLong(2, INSP_ID);
        }
 
        String INSP_EXEC_TYPE = entity.getINSP_EXEC_TYPE();
        if (INSP_EXEC_TYPE != null) {
            stmt.bindString(3, INSP_EXEC_TYPE);
        }
 
        String INSP_FK_ID = entity.getINSP_FK_ID();
        if (INSP_FK_ID != null) {
            stmt.bindString(4, INSP_FK_ID);
        }
 
        String INSP_TYPE = entity.getINSP_TYPE();
        if (INSP_TYPE != null) {
            stmt.bindString(5, INSP_TYPE);
        }
 
        java.util.Date INSP_EXEC_DATE = entity.getINSP_EXEC_DATE();
        if (INSP_EXEC_DATE != null) {
            stmt.bindLong(6, INSP_EXEC_DATE.getTime());
        }
 
        java.util.Date INSP_PRIOR_EXEC_DATE = entity.getINSP_PRIOR_EXEC_DATE();
        if (INSP_PRIOR_EXEC_DATE != null) {
            stmt.bindLong(7, INSP_PRIOR_EXEC_DATE.getTime());
        }
 
        String INSP_STATE = entity.getINSP_STATE();
        if (INSP_STATE != null) {
            stmt.bindString(8, INSP_STATE);
        }
 
        Integer INSP_IS_DEL = entity.getINSP_IS_DEL();
        if (INSP_IS_DEL != null) {
            stmt.bindLong(9, INSP_IS_DEL);
        }
 
        String INSP_REMARK = entity.getINSP_REMARK();
        if (INSP_REMARK != null) {
            stmt.bindString(10, INSP_REMARK);
        }
 
        java.util.Date INSP_CREATE_DATE = entity.getINSP_CREATE_DATE();
        if (INSP_CREATE_DATE != null) {
            stmt.bindLong(11, INSP_CREATE_DATE.getTime());
        }
 
        Integer INSP_CREATE_USER = entity.getINSP_CREATE_USER();
        if (INSP_CREATE_USER != null) {
            stmt.bindLong(12, INSP_CREATE_USER);
        }
 
        java.util.Date INSP_UPDATE_DATE = entity.getINSP_UPDATE_DATE();
        if (INSP_UPDATE_DATE != null) {
            stmt.bindLong(13, INSP_UPDATE_DATE.getTime());
        }
 
        Integer INSP_UPDATE_USER = entity.getINSP_UPDATE_USER();
        if (INSP_UPDATE_USER != null) {
            stmt.bindLong(14, INSP_UPDATE_USER);
        }
 
        Integer INST_FK_ID = entity.getINST_FK_ID();
        if (INST_FK_ID != null) {
            stmt.bindLong(15, INST_FK_ID);
        }
 
        String KPBH = entity.getKPBH();
        if (KPBH != null) {
            stmt.bindString(16, KPBH);
        }
 
        Long DDID = entity.getDDID();
        if (DDID != null) {
            stmt.bindLong(17, DDID);
        }
 
        String DDMC = entity.getDDMC();
        if (DDMC != null) {
            stmt.bindString(18, DDMC);
        }
 
        String WZMC = entity.getWZMC();
        if (WZMC != null) {
            stmt.bindString(19, WZMC);
        }
 
        String ZQLX = entity.getZQLX();
        if (ZQLX != null) {
            stmt.bindString(20, ZQLX);
        }
 
        Long XJFL = entity.getXJFL();
        if (XJFL != null) {
            stmt.bindLong(21, XJFL);
        }
 
        String XJFL_MC = entity.getXJFL_MC();
        if (XJFL_MC != null) {
            stmt.bindString(22, XJFL_MC);
        }
 
        String INSE_CYCLE = entity.getINSE_CYCLE();
        if (INSE_CYCLE != null) {
            stmt.bindString(23, INSE_CYCLE);
        }
 
        String RFID_CODE = entity.getRFID_CODE();
        if (RFID_CODE != null) {
            stmt.bindString(24, RFID_CODE);
        }
 
        String BAR_CODE = entity.getBAR_CODE();
        if (BAR_CODE != null) {
            stmt.bindString(25, BAR_CODE);
        }
 
        Integer ISCHECK = entity.getISCHECK();
        if (ISCHECK != null) {
            stmt.bindLong(26, ISCHECK);
        }
 
        Integer RESULT = entity.getRESULT();
        if (RESULT != null) {
            stmt.bindLong(27, RESULT);
        }
 
        java.util.Date DOWN_DATE = entity.getDOWN_DATE();
        if (DOWN_DATE != null) {
            stmt.bindLong(28, DOWN_DATE.getTime());
        }
 
        java.util.Date INSP_EXEC_DATE_END = entity.getINSP_EXEC_DATE_END();
        if (INSP_EXEC_DATE_END != null) {
            stmt.bindLong(29, INSP_EXEC_DATE_END.getTime());
        }
 
        String KPBH_OLD = entity.getKPBH_OLD();
        if (KPBH_OLD != null) {
            stmt.bindString(30, KPBH_OLD);
        }
 
        Long KSID = entity.getKSID();
        if (KSID != null) {
            stmt.bindLong(31, KSID);
        }
 
        Integer INSE_CYCLE_FLOAT = entity.getINSE_CYCLE_FLOAT();
        if (INSE_CYCLE_FLOAT != null) {
            stmt.bindLong(32, INSE_CYCLE_FLOAT);
        }
 
        java.util.Date INSP_EXEC_START_DATE = entity.getINSP_EXEC_START_DATE();
        if (INSP_EXEC_START_DATE != null) {
            stmt.bindLong(33, INSP_EXEC_START_DATE.getTime());
        }
 
        java.util.Date INSP_EXEC_END_DATE = entity.getINSP_EXEC_END_DATE();
        if (INSP_EXEC_END_DATE != null) {
            stmt.bindLong(34, INSP_EXEC_END_DATE.getTime());
        }
 
        String KSMC = entity.getKSMC();
        if (KSMC != null) {
            stmt.bindString(35, KSMC);
        }
 
        String SCBH = entity.getSCBH();
        if (SCBH != null) {
            stmt.bindString(36, SCBH);
        }
 
        String GGXH = entity.getGGXH();
        if (GGXH != null) {
            stmt.bindString(37, GGXH);
        }
 
        String PPMC = entity.getPPMC();
        if (PPMC != null) {
            stmt.bindString(38, PPMC);
        }
 
        Long INSE_TEMPLATE_ID = entity.getINSE_TEMPLATE_ID();
        if (INSE_TEMPLATE_ID != null) {
            stmt.bindLong(39, INSE_TEMPLATE_ID);
        }
 
        java.util.Date CREATE_DATE = entity.getCREATE_DATE();
        if (CREATE_DATE != null) {
            stmt.bindLong(40, CREATE_DATE.getTime());
        }
 
        java.util.Date MODIFY_DATE = entity.getMODIFY_DATE();
        if (MODIFY_DATE != null) {
            stmt.bindLong(41, MODIFY_DATE.getTime());
        }
 
        String KFID = entity.getKFID();
        if (KFID != null) {
            stmt.bindString(42, KFID);
        }
 
        Boolean IS_TEMPORARY = entity.getIS_TEMPORARY();
        if (IS_TEMPORARY != null) {
            stmt.bindLong(43, IS_TEMPORARY ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, INSPECT_PLAN entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        Long INSP_ID = entity.getINSP_ID();
        if (INSP_ID != null) {
            stmt.bindLong(2, INSP_ID);
        }
 
        String INSP_EXEC_TYPE = entity.getINSP_EXEC_TYPE();
        if (INSP_EXEC_TYPE != null) {
            stmt.bindString(3, INSP_EXEC_TYPE);
        }
 
        String INSP_FK_ID = entity.getINSP_FK_ID();
        if (INSP_FK_ID != null) {
            stmt.bindString(4, INSP_FK_ID);
        }
 
        String INSP_TYPE = entity.getINSP_TYPE();
        if (INSP_TYPE != null) {
            stmt.bindString(5, INSP_TYPE);
        }
 
        java.util.Date INSP_EXEC_DATE = entity.getINSP_EXEC_DATE();
        if (INSP_EXEC_DATE != null) {
            stmt.bindLong(6, INSP_EXEC_DATE.getTime());
        }
 
        java.util.Date INSP_PRIOR_EXEC_DATE = entity.getINSP_PRIOR_EXEC_DATE();
        if (INSP_PRIOR_EXEC_DATE != null) {
            stmt.bindLong(7, INSP_PRIOR_EXEC_DATE.getTime());
        }
 
        String INSP_STATE = entity.getINSP_STATE();
        if (INSP_STATE != null) {
            stmt.bindString(8, INSP_STATE);
        }
 
        Integer INSP_IS_DEL = entity.getINSP_IS_DEL();
        if (INSP_IS_DEL != null) {
            stmt.bindLong(9, INSP_IS_DEL);
        }
 
        String INSP_REMARK = entity.getINSP_REMARK();
        if (INSP_REMARK != null) {
            stmt.bindString(10, INSP_REMARK);
        }
 
        java.util.Date INSP_CREATE_DATE = entity.getINSP_CREATE_DATE();
        if (INSP_CREATE_DATE != null) {
            stmt.bindLong(11, INSP_CREATE_DATE.getTime());
        }
 
        Integer INSP_CREATE_USER = entity.getINSP_CREATE_USER();
        if (INSP_CREATE_USER != null) {
            stmt.bindLong(12, INSP_CREATE_USER);
        }
 
        java.util.Date INSP_UPDATE_DATE = entity.getINSP_UPDATE_DATE();
        if (INSP_UPDATE_DATE != null) {
            stmt.bindLong(13, INSP_UPDATE_DATE.getTime());
        }
 
        Integer INSP_UPDATE_USER = entity.getINSP_UPDATE_USER();
        if (INSP_UPDATE_USER != null) {
            stmt.bindLong(14, INSP_UPDATE_USER);
        }
 
        Integer INST_FK_ID = entity.getINST_FK_ID();
        if (INST_FK_ID != null) {
            stmt.bindLong(15, INST_FK_ID);
        }
 
        String KPBH = entity.getKPBH();
        if (KPBH != null) {
            stmt.bindString(16, KPBH);
        }
 
        Long DDID = entity.getDDID();
        if (DDID != null) {
            stmt.bindLong(17, DDID);
        }
 
        String DDMC = entity.getDDMC();
        if (DDMC != null) {
            stmt.bindString(18, DDMC);
        }
 
        String WZMC = entity.getWZMC();
        if (WZMC != null) {
            stmt.bindString(19, WZMC);
        }
 
        String ZQLX = entity.getZQLX();
        if (ZQLX != null) {
            stmt.bindString(20, ZQLX);
        }
 
        Long XJFL = entity.getXJFL();
        if (XJFL != null) {
            stmt.bindLong(21, XJFL);
        }
 
        String XJFL_MC = entity.getXJFL_MC();
        if (XJFL_MC != null) {
            stmt.bindString(22, XJFL_MC);
        }
 
        String INSE_CYCLE = entity.getINSE_CYCLE();
        if (INSE_CYCLE != null) {
            stmt.bindString(23, INSE_CYCLE);
        }
 
        String RFID_CODE = entity.getRFID_CODE();
        if (RFID_CODE != null) {
            stmt.bindString(24, RFID_CODE);
        }
 
        String BAR_CODE = entity.getBAR_CODE();
        if (BAR_CODE != null) {
            stmt.bindString(25, BAR_CODE);
        }
 
        Integer ISCHECK = entity.getISCHECK();
        if (ISCHECK != null) {
            stmt.bindLong(26, ISCHECK);
        }
 
        Integer RESULT = entity.getRESULT();
        if (RESULT != null) {
            stmt.bindLong(27, RESULT);
        }
 
        java.util.Date DOWN_DATE = entity.getDOWN_DATE();
        if (DOWN_DATE != null) {
            stmt.bindLong(28, DOWN_DATE.getTime());
        }
 
        java.util.Date INSP_EXEC_DATE_END = entity.getINSP_EXEC_DATE_END();
        if (INSP_EXEC_DATE_END != null) {
            stmt.bindLong(29, INSP_EXEC_DATE_END.getTime());
        }
 
        String KPBH_OLD = entity.getKPBH_OLD();
        if (KPBH_OLD != null) {
            stmt.bindString(30, KPBH_OLD);
        }
 
        Long KSID = entity.getKSID();
        if (KSID != null) {
            stmt.bindLong(31, KSID);
        }
 
        Integer INSE_CYCLE_FLOAT = entity.getINSE_CYCLE_FLOAT();
        if (INSE_CYCLE_FLOAT != null) {
            stmt.bindLong(32, INSE_CYCLE_FLOAT);
        }
 
        java.util.Date INSP_EXEC_START_DATE = entity.getINSP_EXEC_START_DATE();
        if (INSP_EXEC_START_DATE != null) {
            stmt.bindLong(33, INSP_EXEC_START_DATE.getTime());
        }
 
        java.util.Date INSP_EXEC_END_DATE = entity.getINSP_EXEC_END_DATE();
        if (INSP_EXEC_END_DATE != null) {
            stmt.bindLong(34, INSP_EXEC_END_DATE.getTime());
        }
 
        String KSMC = entity.getKSMC();
        if (KSMC != null) {
            stmt.bindString(35, KSMC);
        }
 
        String SCBH = entity.getSCBH();
        if (SCBH != null) {
            stmt.bindString(36, SCBH);
        }
 
        String GGXH = entity.getGGXH();
        if (GGXH != null) {
            stmt.bindString(37, GGXH);
        }
 
        String PPMC = entity.getPPMC();
        if (PPMC != null) {
            stmt.bindString(38, PPMC);
        }
 
        Long INSE_TEMPLATE_ID = entity.getINSE_TEMPLATE_ID();
        if (INSE_TEMPLATE_ID != null) {
            stmt.bindLong(39, INSE_TEMPLATE_ID);
        }
 
        java.util.Date CREATE_DATE = entity.getCREATE_DATE();
        if (CREATE_DATE != null) {
            stmt.bindLong(40, CREATE_DATE.getTime());
        }
 
        java.util.Date MODIFY_DATE = entity.getMODIFY_DATE();
        if (MODIFY_DATE != null) {
            stmt.bindLong(41, MODIFY_DATE.getTime());
        }
 
        String KFID = entity.getKFID();
        if (KFID != null) {
            stmt.bindString(42, KFID);
        }
 
        Boolean IS_TEMPORARY = entity.getIS_TEMPORARY();
        if (IS_TEMPORARY != null) {
            stmt.bindLong(43, IS_TEMPORARY ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public INSPECT_PLAN readEntity(Cursor cursor, int offset) {
        INSPECT_PLAN entity = new INSPECT_PLAN( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // INSP_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // INSP_EXEC_TYPE
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // INSP_FK_ID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // INSP_TYPE
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // INSP_EXEC_DATE
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // INSP_PRIOR_EXEC_DATE
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // INSP_STATE
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // INSP_IS_DEL
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // INSP_REMARK
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // INSP_CREATE_DATE
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // INSP_CREATE_USER
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // INSP_UPDATE_DATE
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // INSP_UPDATE_USER
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // INST_FK_ID
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // KPBH
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16), // DDID
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // DDMC
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // WZMC
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // ZQLX
            cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20), // XJFL
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // XJFL_MC
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // INSE_CYCLE
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // RFID_CODE
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // BAR_CODE
            cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // ISCHECK
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // RESULT
            cursor.isNull(offset + 27) ? null : new java.util.Date(cursor.getLong(offset + 27)), // DOWN_DATE
            cursor.isNull(offset + 28) ? null : new java.util.Date(cursor.getLong(offset + 28)), // INSP_EXEC_DATE_END
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // KPBH_OLD
            cursor.isNull(offset + 30) ? null : cursor.getLong(offset + 30), // KSID
            cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31), // INSE_CYCLE_FLOAT
            cursor.isNull(offset + 32) ? null : new java.util.Date(cursor.getLong(offset + 32)), // INSP_EXEC_START_DATE
            cursor.isNull(offset + 33) ? null : new java.util.Date(cursor.getLong(offset + 33)), // INSP_EXEC_END_DATE
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // KSMC
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // SCBH
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // GGXH
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // PPMC
            cursor.isNull(offset + 38) ? null : cursor.getLong(offset + 38), // INSE_TEMPLATE_ID
            cursor.isNull(offset + 39) ? null : new java.util.Date(cursor.getLong(offset + 39)), // CREATE_DATE
            cursor.isNull(offset + 40) ? null : new java.util.Date(cursor.getLong(offset + 40)), // MODIFY_DATE
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // KFID
            cursor.isNull(offset + 42) ? null : cursor.getShort(offset + 42) != 0 // IS_TEMPORARY
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, INSPECT_PLAN entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setINSP_ID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setINSP_EXEC_TYPE(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setINSP_FK_ID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setINSP_TYPE(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setINSP_EXEC_DATE(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setINSP_PRIOR_EXEC_DATE(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setINSP_STATE(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setINSP_IS_DEL(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setINSP_REMARK(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setINSP_CREATE_DATE(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setINSP_CREATE_USER(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setINSP_UPDATE_DATE(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setINSP_UPDATE_USER(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setINST_FK_ID(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setKPBH(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDDID(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
        entity.setDDMC(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setWZMC(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setZQLX(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setXJFL(cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20));
        entity.setXJFL_MC(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setINSE_CYCLE(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setRFID_CODE(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setBAR_CODE(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setISCHECK(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setRESULT(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setDOWN_DATE(cursor.isNull(offset + 27) ? null : new java.util.Date(cursor.getLong(offset + 27)));
        entity.setINSP_EXEC_DATE_END(cursor.isNull(offset + 28) ? null : new java.util.Date(cursor.getLong(offset + 28)));
        entity.setKPBH_OLD(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setKSID(cursor.isNull(offset + 30) ? null : cursor.getLong(offset + 30));
        entity.setINSE_CYCLE_FLOAT(cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31));
        entity.setINSP_EXEC_START_DATE(cursor.isNull(offset + 32) ? null : new java.util.Date(cursor.getLong(offset + 32)));
        entity.setINSP_EXEC_END_DATE(cursor.isNull(offset + 33) ? null : new java.util.Date(cursor.getLong(offset + 33)));
        entity.setKSMC(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setSCBH(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setGGXH(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setPPMC(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setINSE_TEMPLATE_ID(cursor.isNull(offset + 38) ? null : cursor.getLong(offset + 38));
        entity.setCREATE_DATE(cursor.isNull(offset + 39) ? null : new java.util.Date(cursor.getLong(offset + 39)));
        entity.setMODIFY_DATE(cursor.isNull(offset + 40) ? null : new java.util.Date(cursor.getLong(offset + 40)));
        entity.setKFID(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setIS_TEMPORARY(cursor.isNull(offset + 42) ? null : cursor.getShort(offset + 42) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(INSPECT_PLAN entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(INSPECT_PLAN entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(INSPECT_PLAN entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
