package coder.aihui.data.bean.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import coder.aihui.data.bean.INSPECT_EXT_EXECUTOR;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INSPECT__EXT__EXECUTOR".
*/
public class INSPECT_EXT_EXECUTORDao extends AbstractDao<INSPECT_EXT_EXECUTOR, Long> {

    public static final String TABLENAME = "INSPECT__EXT__EXECUTOR";

    /**
     * Properties of entity INSPECT_EXT_EXECUTOR.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property INSEE_ID = new Property(0, Long.class, "INSEE_ID", true, "INSEE_ID");
        public final static Property INSEE_USER_ID = new Property(1, Integer.class, "INSEE_USER_ID", false, "INSEE__USER__ID");
        public final static Property INSEE_FK_ID = new Property(2, String.class, "INSEE_FK_ID", false, "INSEE__FK__ID");
        public final static Property INSEE_TYPE = new Property(3, String.class, "INSEE_TYPE", false, "INSEE__TYPE");
    }


    public INSPECT_EXT_EXECUTORDao(DaoConfig config) {
        super(config);
    }
    
    public INSPECT_EXT_EXECUTORDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INSPECT__EXT__EXECUTOR\" (" + //
                "\"INSEE_ID\" INTEGER PRIMARY KEY ," + // 0: INSEE_ID
                "\"INSEE__USER__ID\" INTEGER," + // 1: INSEE_USER_ID
                "\"INSEE__FK__ID\" TEXT," + // 2: INSEE_FK_ID
                "\"INSEE__TYPE\" TEXT);"); // 3: INSEE_TYPE
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INSPECT__EXT__EXECUTOR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, INSPECT_EXT_EXECUTOR entity) {
        stmt.clearBindings();
 
        Long INSEE_ID = entity.getINSEE_ID();
        if (INSEE_ID != null) {
            stmt.bindLong(1, INSEE_ID);
        }
 
        Integer INSEE_USER_ID = entity.getINSEE_USER_ID();
        if (INSEE_USER_ID != null) {
            stmt.bindLong(2, INSEE_USER_ID);
        }
 
        String INSEE_FK_ID = entity.getINSEE_FK_ID();
        if (INSEE_FK_ID != null) {
            stmt.bindString(3, INSEE_FK_ID);
        }
 
        String INSEE_TYPE = entity.getINSEE_TYPE();
        if (INSEE_TYPE != null) {
            stmt.bindString(4, INSEE_TYPE);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, INSPECT_EXT_EXECUTOR entity) {
        stmt.clearBindings();
 
        Long INSEE_ID = entity.getINSEE_ID();
        if (INSEE_ID != null) {
            stmt.bindLong(1, INSEE_ID);
        }
 
        Integer INSEE_USER_ID = entity.getINSEE_USER_ID();
        if (INSEE_USER_ID != null) {
            stmt.bindLong(2, INSEE_USER_ID);
        }
 
        String INSEE_FK_ID = entity.getINSEE_FK_ID();
        if (INSEE_FK_ID != null) {
            stmt.bindString(3, INSEE_FK_ID);
        }
 
        String INSEE_TYPE = entity.getINSEE_TYPE();
        if (INSEE_TYPE != null) {
            stmt.bindString(4, INSEE_TYPE);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public INSPECT_EXT_EXECUTOR readEntity(Cursor cursor, int offset) {
        INSPECT_EXT_EXECUTOR entity = new INSPECT_EXT_EXECUTOR( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // INSEE_ID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // INSEE_USER_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // INSEE_FK_ID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // INSEE_TYPE
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, INSPECT_EXT_EXECUTOR entity, int offset) {
        entity.setINSEE_ID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setINSEE_USER_ID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setINSEE_FK_ID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setINSEE_TYPE(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(INSPECT_EXT_EXECUTOR entity, long rowId) {
        entity.setINSEE_ID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(INSPECT_EXT_EXECUTOR entity) {
        if(entity != null) {
            return entity.getINSEE_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(INSPECT_EXT_EXECUTOR entity) {
        return entity.getINSEE_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
