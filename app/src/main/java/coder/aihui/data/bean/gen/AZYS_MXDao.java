package coder.aihui.data.bean.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import coder.aihui.data.bean.AZYS_MX;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AZYS__MX".
*/
public class AZYS_MXDao extends AbstractDao<AZYS_MX, Long> {

    public static final String TABLENAME = "AZYS__MX";

    /**
     * Properties of entity AZYS_MX.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ITEM_NAME = new Property(0, String.class, "ITEM_NAME", false, "ITEM__NAME");
        public final static Property ITEM_ID = new Property(1, Long.class, "ITEM_ID", true, "_id");
        public final static Property IsChecked = new Property(2, boolean.class, "isChecked", false, "IS_CHECKED");
    }


    public AZYS_MXDao(DaoConfig config) {
        super(config);
    }
    
    public AZYS_MXDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AZYS__MX\" (" + //
                "\"ITEM__NAME\" TEXT," + // 0: ITEM_NAME
                "\"_id\" INTEGER PRIMARY KEY ," + // 1: ITEM_ID
                "\"IS_CHECKED\" INTEGER NOT NULL );"); // 2: isChecked
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AZYS__MX\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AZYS_MX entity) {
        stmt.clearBindings();
 
        String ITEM_NAME = entity.getITEM_NAME();
        if (ITEM_NAME != null) {
            stmt.bindString(1, ITEM_NAME);
        }
 
        Long ITEM_ID = entity.getITEM_ID();
        if (ITEM_ID != null) {
            stmt.bindLong(2, ITEM_ID);
        }
        stmt.bindLong(3, entity.getIsChecked() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AZYS_MX entity) {
        stmt.clearBindings();
 
        String ITEM_NAME = entity.getITEM_NAME();
        if (ITEM_NAME != null) {
            stmt.bindString(1, ITEM_NAME);
        }
 
        Long ITEM_ID = entity.getITEM_ID();
        if (ITEM_ID != null) {
            stmt.bindLong(2, ITEM_ID);
        }
        stmt.bindLong(3, entity.getIsChecked() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    @Override
    public AZYS_MX readEntity(Cursor cursor, int offset) {
        AZYS_MX entity = new AZYS_MX( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ITEM_NAME
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // ITEM_ID
            cursor.getShort(offset + 2) != 0 // isChecked
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AZYS_MX entity, int offset) {
        entity.setITEM_NAME(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setITEM_ID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setIsChecked(cursor.getShort(offset + 2) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AZYS_MX entity, long rowId) {
        entity.setITEM_ID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AZYS_MX entity) {
        if(entity != null) {
            return entity.getITEM_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AZYS_MX entity) {
        return entity.getITEM_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
